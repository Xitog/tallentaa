!const TITLE=JSON
!const ICON=https://xitog.github.io/dgx/img/favicon.ico
!require https://xitog.github.io/dgx/css/simplex.bootstrap.css
!require https://xitog.github.io/dgx/css/palatino.css
!require https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js
!require https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js
!var DEFAULT_CODE=json

{{#main .container}}

!include menu.html

{{#content-div}}

# JSON
---

Cette fiche expose le format de données **JSON** inventé par Douglas Crockford en 2001. JSON signifie **JavaScript Object Notation** car sa syntaxe est héritée du langage de programmation JavaScript. Elle est un sous-ensemble du langage **YAML**.

Parfois, vous devez sauvegarder vos données en mémoire vive sur le disque dur ou bien les envoyer à un programme distant. Pour cela il faut **sérialiser vos données**, c'est-à-dire les écrire dans un format qui permet leur sauvegarde ou leur transmission. JSON est un tel format. C'est un format texte lisible par l'humain, très simple : ses spécifications sont courtes et claires.

Création : le 10 avril 2017 | Dernière mise-à-jour : le 25 septembre 2018 | Conversion en [Hamill->https://xitog.github.io/dgx/informatique/hamill.html] : le 19 septembre 2020

Auteur : Damien Gouteux | Type : Fiche | Sujet : JSON, donnée, langage, modélisation, informatique

## Sommaire

* [Liens->#]
* [Description->#]
* [Textes de référence->#]
* [Exemple->#]
* [Autres formats->#]

## Liens

### JSON

* [Site officiel de JSON->http://www.json.org/json-fr.html].
* [JSON Lint->http://jsonlint.com/], un site pour valider syntaxiquement ses documents JSON.
* Gérer JSON en...
* * [JSON dans la documentation officielle->https://docs.python.org/3/library/json.html] de Python.
* * [JSON dans la documentation officielle->http://ruby-doc.org/stdlib-2.0.0/libdoc/json/rdoc/JSON.html] de Ruby.
* * [Liste de modules->http://lua-users.org/wiki/JsonModules] pour gérer le format JSON en Lua.

### JSON Schema

* [JSON Schema->http://json-schema.org/], pour valider ses documents JSON par rapport à un métamodèle.
* * [JSON Schema Core->https://json-schema.org/latest/json-schema-core.html], ce document décrit le noyau de JSON Schema,
* * [JSON Schema Validation->https://json-schema.org/latest/json-schema-validation.html], ce document décrit les contraintes disponibles sur les données.
* [Understanding JSON Schema->https://json-schema.org/understanding-json-schema], un livre électronique expliquant JSON Schema.
* [JSON Schema Validator->https://www.jsonschemavalidator.net/], pour valider des données contre un schéma.

## Description

On peut diviser les 6 types de données en 2 :

* Les types ''atomiques''^^1^^ de données :
* * Number (entiers et réels) : @@1.2 23@@,
* * String @@"bonjour"@@,
* * Boolean @@true false@@,
* * et la valeur @@null@@.
* Les types ''composés''^^1^^ de données :
* * Object @@{ clé : value, ... }@@,
* * Array @@\[ val1, ...]@@.

^^1^^: atomiques et composés sont des termes personnels.

Remarques :

* **La clé ne peut être que de type** @@String@@, pas de nombres, pas d'identifiant.
* JSON est un sous-ensemble du langage [YAML->http://yaml.org/], plus particulièrement de sa syntaxe compacte.
* JSON est un sous-ensemble de [JavaScript->https://developer.mozilla.org/fr/docs/Web/JavaScript].
* Pas de guillemet simple @@'@@ pour encadrer les chaînes de caractères seulement le double @@"@@.
* Les chaînes de caractères doivent être en [Unicode->http://unicode.org/fr/], plus précisément, encodées en [UTF-8->https://tools.ietf.org/html/rfc8259#section-8.1].
* **Pas de virgule @@,@@ après l'élément final d'un Object ou d'une Array**.
* **On ne peut pas faire de commentaires en JSON**.

## Textes de référence

JSON est défini dans les documents suivants :

* [ECMA-404->https://www.ecma-international.org/publications/standards/Ecma-404.htm] : **Standard ECMA 404**
* [RFC 8259->https://tools.ietf.org/html/rfc8259] : **Dernière spécification en date**
* [RFC 7493->https://tools.ietf.org/html/rfc7493] : **I-JSON recommandé par Tim Bray***
* [RFC 7159->https://tools.ietf.org/html/rfc7159] : obsolète
* [RFC 7158->https://tools.ietf.org/html/rfc7158] : obsolète
* [RFC 4627->https://tools.ietf.org/html/rfc4627] : obsolète

\* Tim Bray a édité les différentes RFC après avoir travaillé sur XML. Il fait des commentaires très utiles dans son blog personnel :

* [The Last JSON Spec->https://www.tbray.org/ongoing/When/201x/2017/12/14/RFC-8259-STD-90] : quelle spécification prendre
* [JSON Redux AKA RFC7159->https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON] : histoire de la standardisation
* [Fixing JSON->https://www.tbray.org/ongoing/When/201x/2016/08/20/Fixing-JSON] : des points à réparer dans la spécification actuelle, notamment sur la virgule
* [Specifying JSON->https://www.tbray.org/ongoing/When/201x/2016/04/30/JSON-Schema-funnies] : sur la nécessité de spécifier

## Exemple

@@@json
    {
        "type" : "Voiture",
        "marque" : "Hyundai",
        "modèle" : "Getz",
        "annéeConstruction" : 2005,
        "nomConducteurs" : [
            "Damien",
            "Charles",
            "Gustave"
        ],
        "madeInEurope" : false
    }
@@@

## Autres formats

Il existe d'autres formats qui remplisse les mêmes fonctions que JSON :

* [YAML->http://yaml.org/] : JSON est un sous-ensemble du langage YAML qui est beaucoup plus riche,
* [Langage EDN->https://github.com/edn-format/edn] : langage basé sur le langage de programmation Clojure,
* [JSON5->https://json5.org/] : extension de JSON,
* [HJSON->https://raw.githubusercontent.com/hjson/hjson/master/rfc/hjson.txt] : extension de JSON,
* [Transit->https://github.com/cognitect/transit-format] : un autre format de sérialisation d'objet,
* [MessagePack->https://github.com/msgpack/msgpack/blob/master/spec.md] : un autre format de sérialisation d'objet,
* [Apache Avro->https://avro.apache.org/] : un autre format de sérialisation de données.
* [JSON LD->https://json-ld.org/] : format pour décrire des données liées utilisant JSON devenu une [recommandation du W3C->https://www.w3.org/TR/json-ld/].

{{end}}
{{end}}
