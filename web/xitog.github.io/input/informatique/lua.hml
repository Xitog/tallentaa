!const TITLE=Aide-mémoire Lua
!const LANG=fr
!const ICON=https://xitog.github.io/dgx/img/favicon.ico
!require https://xitog.github.io/dgx/css/simplex.bootstrap.css
!require https://xitog.github.io/dgx/css/flashy.css
!require https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js
!require https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js

!var DEFAULT_CODE=lua

!css p { text-align: justify; }
!css span.type    { color: purple; font-family: "Consolas"; }
!css span.lua-number  { color: red;    font-family: "Consolas"; }
!css span.lua-line_comment { color: grey;   font-family: "Consolas"; font-style: italic; }
!css span.lua-string  { color: orange; font-family: "Consolas"; }
!css span.lua-keyword { color: #1479cc;   font-family: "Consolas"; font-weight: bold; }
!css span.lua-special { color: purple; font-family: "Consolas"; }

!css h1 { color: #14cc67; font-family: "Palatino Linotype"; font-size: 22px; border-bottom: 1px solid #14cc67; font-weight: bold; margin-top: 18px; margin-bottom: 18px; }
!css h2 { color: #6714cc; font-family: "Palatino Linotype"; font-size: 18px; font-weight: bold; margin-top: 18px; margin-bottom: 18px; border-bottom: none;}
!css h3 { color: #cc6714; font-family: "Palatino Linotype"; font-size: 16px; font-weight: bold; margin-top:  6px; margin-bottom:  6px; }

!css li a { color: #6714cc; font-size: 16px; font-family: "Palatino Linotype"; }
!css li   { font-size: 16px; color: black; font-family: "Palatino Linotype"; }

!css p.back { text-align: center; }

!var DEFAULT_CODE=lua

{{#main .container}}

!include menu.html

{{#content-div}}

# Sommaire

* [Introduction->#]
* [1. Bases du langage->#]
* * [1.1 Description->#]
* * [1.2 Historique et influences->#]
* * [1.3 Désavantages->#]
* * [1.4 Utilisations->#]
* * [1.5 Bonjour le monde !->#]
* * [1.6 Affichage->#]
* * [1.7 Mots réservés->#]
* * [1.8 Commentaires->#]
* * [1.9 Variables->#]
* [2. Sites web->#]
* * [2.1 Bibliothèques->#]
* * [2.2 Outils->#]
* [3. Types de base->#]
* * Nombres
* * Chaînes de caractères
* * Booléens
* * Valeur nil
* * Tables
* * * Définition
* * * Accès
* * * Métatable
* [4. Opérateurs->#]
* * Opérateurs binaires
* * * Opérateurs arithmétiques
* * * Opérateurs de comparaisons
* * * Opérateurs booléens
* * * Autres opérateurs
* * Opérateurs unaires
* * * Opérateurs arithmétiques
* * * Opérateurs booléens
* [5. Contrôle du flux->#]
* * Séquence
* * Conditions
* * Répétitions
* [6. Fonctions->#]
* * Définition
* * Appel
* * Closure
* [7. Gestion des exceptions->#]
* * Appels protégés
* [8. Bibliothèque de base->#]
* * Sortie et entrée console
* * Nombres
* * Chaînes de caractères
* * Tables
* * Fichiers

# Introduction

Cet aide-mémoire expose la syntaxe du langage de programmation *Lua* et quelques opérations de base. Idéal pour se rafraîchir la mémoire, il peut également servir à un apprentissage de ce langage pour des personnes qui connaissent déjà un ou plusieurs langages de programmation. Pour les débutants en programmation, un véritable guide serait préférable. Parfois, des différences notables avec le langage *Python* sont soulignées.

mis à jour le 21 avril 2017, créé le 4 avril 2017, converti en HML le 24 juillet 2020.

{{.sign}} Damien Gouteux

# 1. Bases du langage

## 1.1 Description

Lua est un langage de script, gratuit, concis et simple :

* Concis car le langage est assez petit aussi bien dans son nombre de mots-clés que les concepts qu'il met en jeu. Il n'y a par exemple qu'un type de données structurées, les tables, alors que de Python utilisent des tuples, des sets, des listes, des dictionnaires. L'orientation objet n'est pas supportée par des mots-clés dans le langage, il faut la reprogrammer à la main mais Lua offre des facilités pour développer les capacités du langage.
* Simple car Lua a une syntaxe assez standard et très permissive : on peut appeler une fonction sans respecter le nombre de paramètres demandés, on peut simplement concaténer deux expressions à la suite, il n'y pas de système de typage des variables.

La version majeure actuelle (juillet 2020) est la version 5 et est disponible selon les termes de la licence MIT.

Version actuelle à la date d'écriture : 5.4 (2020)

Date d'apparition du langage : 1993

Créateurs : Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes (Brésil)

Extension d'un fichier Lua : @@text lua@@

Exécuter mon_fichier.lua : @@text lua mon_fichier.lua@@

## 1.2 Historique et influences

Lua a été développé au Brésil à partir de 1993 par Roberto Ierusalimschy, Waldemar Celes et Luiz Henrique de Figueiredo au sein du groupe de recherche ''Computer Graphics Technology Group'' ([[TeCGraf->https://www.tecgraf.puc-rio.br/]] ^^[pt, en]^^), de l'université pontificale catholique de Rio de Janeiro avec l'aide du géant industriel [[Petrobras->http://www.petrobras.com.br/en/]] ^^[en]^^.

Sa syntaxe emprunte au langage Modula, un langage développé dans les années 70 en Suisse par Niklaus Wirth, le créateur de Pascal. Elle présente des similarités avec le langage de script Ruby (sans la partie orientée objet).

Lua signifie lune en portugais et se prononce dans cette langue "loua".

## 1.3 Désavantages

Le revers des deux traits principaux est que Lua a des manques ou des difficultés qui n'existent pas dans des langages plus complets :

* L'absence de mécanisme d'orientation objet de base,
* Le danger de pouvoir concaténer deux expressions à la suite, sans avoir besoin de séparateurs : 3+5 2 est valide en Lua !
* Une bibliothèque standard minimaliste (mais permet une taille réduite)
* Il n'y a pas de mot clé continue ou next pour avancer une itération
* l'opérateur de différence ~= au lieu du standard de facto !=
* La usion du concept de liste et de dictionnaire
* La difficulté à connaître la longueur d'une liste et s'assurer de sa continuité,

## 1.4 Utilisations

Lua peut être utilisé de deux façons :

* Via l'interpréteur en tant qu'API C embarqué dans une **application hôte**. il permet de piloter celle-ci via des scripts en utilisant les fonctions supplémentaires qu'elle met à leur disposition et les bibliothèques Lua. Sa concision fait qu'il ne prend pas trop de place dans l'application hôte. On parle alors de **langage d'extension** (''extension language'') ou **embarqué** (''embedded'').
* Via l'interpréteur en tant qu'application, appelé **lua**, on ne peut alors utiliser que les bibliothèques en Lua mais celles-ci sont nombreuses. On parle alors d'utilisation en tant que **langage principal** (''stand alone''). On peut utiliser ce dernier pour exécuter d'un coup des scripts Lua ou en mode interactif via une boucle REPL (''read-eval-print-loop'') en entrant au fur et à mesure des instructions qui sont exécutées au fur et à mesure qu'elles sont entrées dans l'interpréteur. L'interpréteur est programmé en C.

L'interpréteur n'interprète pas directement le script mais le compile en bytecode et envoi celui-ci à la machine virtuelle Lua.

Lua est utilisée de façon embarquée dans de nombreux applications, en particulier des jeux vidéo. On peut citer le lecteur multimédia VLC et le jeu World of Warcraft.

## 1.5 Bonjour le monde !

La tradition veut que l'on commence par écrire "Bonjour le monde !" lorsque l'on découvre un nouveau langage de programmation. Nous ne dérogeons pas à la règle :

@@@lua
-- Ceci est un commentaire jusqu'à la fin de la ligne
print("Bonjour le monde !")
@@@

## 1.6 Affichage

Affichage sur la sortie standard (console) : @@print@@

Le programme le plus simple en Lua : @@print("Hello World!")@@
 
## 1.7 Mots réservés

Mots réservés (22) : and, break, do, else, elseif, end, false, for, function, goto, if, in, local, nil, not, or, repeat, return, then, true, until, while.

## 1.8 Commentaires

Commentaires en Lua : @@-- mon commentaire jusqu'à la fin de la ligne@@

Commentaires sur plusieurs lignes : 

@@@lua
--[[
    vos lignes
--]]
@@@

## 1.9 Variables

Une variable est une référence vers une valeur. Une valeur a un type, pas la variable. L'exemple suivant établie une référence entre la variable a et la valeur 5 de type number.

@@@lua
a = 5
@@@

Il n'y a pas de constantes en Lua : une variable peut référencer ensuite une autre valeur.

Une variable peut référencer n'importe quel type de valeur.

{{.back}} [Retour sommaire->Sommaire]

# 2. Sites web

* Site officiel du langage, il contient tout ce qu'il faut pour débuter : une distribution standard avec notamment l'interpréteur officiel et la bibliothèque standard : [>https://www.lua.org]
* Le livre électronique ''Programming in Lua'', appelé le "PIL", est un livre d'introduction Lua avec de nombreux exemples. La première édition est gratuitement disponible en ligne mais ne correspond plus à la version actuelle du langage : [>https://www.lua.org/pil/contents.html]
* Le wiki des utilisateurs de Lua : [>http://lua-users.org/wiki/]
* Lua binaries, distributions de Lua pour différents systèmes d'exploitation : [>http://luabinaries.sourceforge.net/]
* Löve, une VM Lua mettant à disposition une bibliothèque pour faire des jeux : [>https://love2d.org/]
* MoonSharp, un intérpréteur Lua écrit en C# pour les plates-formes .Net, Mono et Unity : [>http://www.moonsharp.org/]
* Teal, un dérivé de Lua avec des types : [>https://github.com/teal-language/tl]
* Page de Wikipédia sur Lua : [>https://en.wikipedia.org/wiki/Lua_(programming_language)]
* Boutique officielle pour supporter Lua via l'achat de goodies : [>https://www.zazzle.com/Lua_Store]

## 2.1 Bibliothèques

* LuaRocks, le gestionnaire de bibliothèques pour Lua : [>https://luarocks.org/]
* Penlight, une librairie fondamentale pour Lua : [>http://stevedonovan.github.io/Penlight/api/index.html]
* Bibliothèque de « parsing » : [>http://www.inf.puc-rio.br/~roberto/lpeg/]
* Bibliothèque d'interface graphique : [>http://webserver2.tecgraf.puc-rio.br/iup/]

## 2.2 Outils

* ZeroBrane Studio un IDE léger, gratuit, simple et efficace pour Lua : [>https://studio.zerobrane.com/]
* Coder en Lua en ligne avec REPL.it et Moonlight (VM Lua en JavaScript) : [>https://repl.it/languages/lua] et [>http://moonshinejs.org/]

{{.back}} [Retour sommaire->Sommaire]

# 3. Types de base

Les types possibles pour les valeurs sont au nombre de **8** :

* {{.type nil}},
* {{.type boolean}},
* {{.type number}},
* {{.type string}},
* {{.type function}},
* {{.type userdata}},
* {{.type thread}},
* {{.type table}}.

Le type {{.type nil}} n'a qu'une seule valeur, @@nil@@. Le type {{.type boolean}} a deux valeurs, @@true@@ et @@false@@.

Le type {{.type number}} a pour valeurs les entiers et les réels (ou flottants). Les conversions de l'un vers l'autre type sont automatiques. Par défaut, entiers et réels sont stockés sur 64 bits.

Le type {{.type function}} sera plus étudié dans le chapitre suivant. Il s'agit de bloc de code écrit en Lua ou en C.

Le type {{.type string}} unifie les caractères et les chaînes de caractères. Lua peut stocker les chaînes en UTF-8 mais ne sait pas comment les gérer.

Remarques importantes :

* Les valeurs @@nil@@ et @@false@@ sont les deux seules valeurs qui sont considérées comme fausse par les tests. Toutes les autres valeurs, y compris @@0@@ et la chaîne vide @@""@@ sont vraies.

* Les chaînes sont immutables en Lua.

## Nombres

## Chaînes de caractères

## Booléens

## Valeur nil

## Tables

### Définition

### Accès

### Métatable

{{.back}} [Retour sommaire->Sommaire]

# 4. Opérateurs

## Opérateurs binaires

### Opérateurs arithmétiques

### Opérateurs de comparaisons

### Opérateurs booléens

### Autres opérateurs

## Opérateurs unaires

### Opérateurs arithmétiques

### Opérateurs booléens

[Retour sommaire->Sommaire]

# 5. Contrôle du flux

## Séquence

En Lua, le symbole pour terminer les instructions est @@;@@ mais il est totalement optionnel. Ce code est donc valide : @@a = 5 b = 6@@

## Conditions

Pour qu'une partie du code ne soit exécutée que si une condition est vrai, on utilisera @@if@@ :

@@@lua
if condition then
    actions
[ elseif condition then
    actions ] *
[ else
    actions ] ?
end
@@@

Sont considérées fausses les valeurs @@false@@ et @@nil@@. Toutes les autres valeurs sont vraies (dont @@{} "" 0@@).

## Répétitions

Boucle qui s'exécute ''tant que'' la condition est vraie avec @@while@@ :

@@@lua
while condition do
    actions
end
@@@

Le corps de la boucle (ses actions) sera exécuté entre 0 et n fois.

Avec @@repeat@@, le corps de la boucle sera exécuté au moins une fois car la condition est testée après :

@@@lua
repeat
    actions
until condition
@@@

Autre grand classique des boucles, @@for@@ qui peut-être utilisé avec un intervalle numérique :

@@@lua
for identifiant = début, fin [ , pas ] do
    actions
end
@@@

Par défaut le pas est égal à 1 (si fin &lt; début, la boucle ne s'exécutera pas une seule fois).

Ou avec une table indexée par des nombres :

@@@lua
for indice, valeur in ipairs(table) do
    actions
end
@@@

Ou avec une table indexée par des chaînes :

@@@lua
for clé, valeur in pairs(table) do
    actions
end
@@@

Dans les trois cas, on peut utiliser le mot-clé @@break@@ pour sortir de la boucle.

Il n'y a pas de mot-clé ''continue'' ou ''next'' en Lua pour passer à l'itération suivante.

{{.back}} [Retour sommaire->Sommaire]

# 6. Fonctions

## Définition

## Appel

## Closure

{{.back}} [Retour sommaire->Sommaire]

# 7. Gestion des exceptions

## Appels protégés

{{.back}} [Retour sommaire->Sommaire]

# 8. Bibliothèque de base

## Sortie et entrée console

## Nombres

## Chaînes de caractères

## Tables

## Fichiers

{{.back}} [Retour sommaire->Sommaire]

{{end}}
{{end}}