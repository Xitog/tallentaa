!const TITLE=Aide-mémoire Lua
!const LANG=fr
!const ICON=https://xitog.github.io/dgx/img/favicon.ico
!require https://xitog.github.io/dgx/css/simplex.bootstrap.css
!require https://xitog.github.io/dgx/css/flashy.css
!require https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js
!require https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js

!css body       { font-family: "Palatino Linotype"; font-size: 16px; }

!css h1, h2, h3 { font-family: "Palatino Linotype"; font-weight: bold; }
!css h1         { color: #14cc67; font-size: 22px; margin-top: 18px; margin-bottom: 6px;border-bottom: 1px solid #14cc67; }
!css h2         { color: #6714cc; font-size: 18px; margin-top: 12px; margin-bottom: 6px; border-bottom: none;}
!css h3         { color: #cc6714; font-size: 16px; margin-top:  6px; margin-bottom: 4px; }

!css li a       { color: #6714cc; font-size: 16px; }
!css li         { font-size: 16px; color: black; }

!css @media screen and (min-width: 600px) { .row    { display: flex; } }
!css @media screen and (min-width: 600px) { .column { flex: 50%; margin-left: 0.5em; margin-right: 0.5em; } }
!css @media screen and (max-width: 599px) { .row    { padding-left: 15px; padding-right: 15px; } }

!css p          { text-align: justify; margin-top: 12px; margin-bottom: 12px;}
!css p.sign     { text-align: center; color: grey; font-size: 12px;}

!css b          { text-size: 12px; font-weight: normal; font-family: "Palatino Linotype"; }

!css p code                         { font-size: 12px; background-color: #F9F9F9; }
!css p code span                    { font-family: "Monospace"; }
!css p code span.type               { color: purple;  }
!css p code span.lua-identifier     { color: black;   }
!css p code span.lua-operator       { color: black;   }
!css p code span.lua-separator      { color: black;   }
!css p code span.lua-special        { color: purple;  }
!css p code span.lua-nil            { color: #1479cc; }
!css p code span.lua-boolean        { color: #1479cc; }
!css p code span.lua-number         { color: red;     }
!css p code span.lua-comment        { color: grey;    font-style: italic; }
!css p code span.lua-line_comment   { color: grey; font-style: italic; }
!css p code span.lua-string         { color: orange;  }
!css p code span.lua-keyword        { color: #1479cc; }

!css pre.code                       { font-size: 12px }
!css pre.code span                  { font-family: "Monospace"; }
!css pre.code span.type             { color: purple;  }
!css pre.code span.lua-identifier   { color: black;   }
!css pre.code span.lua-operator     { color: black;   }
!css pre.code span.lua-separator    { color: black;   }
!css pre.code span.lua-special      { color: purple;  }
!css pre.code span.lua-nil          { color: #1479cc; }
!css pre.code span.lua-boolean      { color: #1479cc; }
!css pre.code span.lua-number       { color: red;     }
!css pre.code span.lua-comment      { color: grey; font-style: italic; }
!css pre.code span.lua-line_comment { color: grey; font-style: italic; }
!css pre.code span.lua-string       { color: orange;  }
!css pre.code span.lua-keyword      { color: #1479cc; }

!css span.type                      { color: #14cc67; }

!var DEFAULT_CODE=lua

{{#main .container}}

!include menu.html

{{#content-div}}

# 1. Bases du langage

{{.row}}

{{.column}}

## Description

Lua, lune en portugais, est un langage de script, gratuit, concis et simple :

* Concis car le langage est assez petit aussi bien dans son nombre de mots-clés que les concepts qu'il met en jeu. Il n'y a par exemple qu'un type de données structurées, les tables, alors que de Python utilisent des tuples, des sets, des listes, des dictionnaires. L'orientation objet n'est pas supportée par des mots-clés dans le langage, il faut la reprogrammer à la main mais Lua offre des facilités pour développer les capacités du langage.
* Simple car Lua a une syntaxe assez standard et très permissive : on peut appeler une fonction sans respecter le nombre de paramètres demandés, on peut simplement concaténer deux expressions à la suite, il n'y pas de système de typage des variables.

La version actuelle (mars 2021) est la version 5.4 disponible selon les termes de la licence MIT. Ses fichiers portent l'extension @@text .lua@@.

## Historique et influences

Lua a été développé au Brésil à partir de 1993 par Roberto Ierusalimschy, Waldemar Celes et Luiz Henrique de Figueiredo au sein du groupe de recherche ''Computer Graphics Technology Group'' ([TeCGraf->https://www.tecgraf.puc-rio.br/] ^^[pt, en]^^), de l'université pontificale catholique de Rio de Janeiro avec l'aide du géant industriel [Petrobras->http://www.petrobras.com.br/en/] ^^[en]^^.

Sa syntaxe emprunte au langage Modula, un langage développé dans les années 70 en Suisse par Niklaus Wirth, le créateur de Pascal. Elle présente des similarités avec le langage de script Ruby (sans la partie orientée objet).

## Désavantages

* L'absence de mécanisme d'orientation objet de base,
* Le danger de pouvoir concaténer deux expressions à la suite, sans avoir besoin de séparateurs : 3+5 2 est valide en Lua !
* Une bibliothèque standard minimaliste (mais permet une taille réduite)
* Il n'y a pas de mot clé continue ou next pour avancer une itération
* L'opérateur de différence ~= au lieu du standard de facto !=
* La fusion du concept de liste et de dictionnaire
* La difficulté à connaître la longueur d'une liste et s'assurer de sa continuité

{{end}}

{{.column}}

## Utilisations

Lua peut être utilisé de deux façons :

* Via l'interpréteur en tant qu'API C embarqué dans une **application hôte**. il permet de piloter celle-ci via des scripts en utilisant les fonctions supplémentaires qu'elle met à leur disposition et les bibliothèques Lua. Sa concision fait qu'il ne prend pas trop de place dans l'application hôte. On parle alors de **langage d'extension** (''extension language'') ou **embarqué** (''embedded'').
* Via l'interpréteur en tant qu'application, appelé **lua**, on ne peut alors utiliser que les bibliothèques en Lua mais celles-ci sont nombreuses. On parle alors d'utilisation en tant que **langage principal** (''stand alone''). On peut utiliser ce dernier pour exécuter d'un coup des scripts Lua ou en mode interactif via une boucle REPL (''read-eval-print-loop'') en entrant au fur et à mesure des instructions qui sont exécutées au fur et à mesure qu'elles sont entrées dans l'interpréteur. L'interpréteur est programmé en C.

L'interpréteur n'interprète pas directement le script mais le compile en bytecode et envoi celui-ci à la machine virtuelle Lua.

Lua est utilisée de façon embarquée dans de nombreux applications, en particulier des jeux vidéo. On peut citer le lecteur multimédia VLC et le jeu World of Warcraft.

## Bonjour le monde !

La tradition veut que l'on commence par écrire "Bonjour le monde !" sur la sortie standard (console) lorsque l'on découvre un nouveau langage de programmation.

@@@lua
-- Ceci est un commentaire jusqu'à la fin de la ligne
print("Bonjour le monde !")
@@@

## Mots réservés (22)

@@@lua
and   break do    else  elseif end false for    function 
goto  if    in    local nil    not or    repeat return
then  true  until while
@@@

## Commentaires

Commentaires en Lua : @@-- mon commentaire jusqu'à la fin de la ligne@@

Commentaires sur plusieurs lignes : 

@@@lua
--[[
    vos lignes
--]]
@@@

## Variables

Une variable est une référence vers une valeur. Une valeur a un type, pas la variable. L'exemple suivant établie une référence entre la variable a et la valeur 5 de type number.

@@@lua
a = 5
@@@

Il n'y a pas de constantes en Lua : une variable peut référencer ensuite une autre valeur.

Une variable peut référencer n'importe quel type de valeur.

{{end}}

{{end}}

# 2. Types de base (8)

{{.row}}

{{.column}}

## nil

Le type {{.type nil}} n'a qu'une seule valeur, @@nil@@.

## Booléens : boolean

Le type {{.type boolean}} a deux valeurs, @@true@@ et @@false@@.

Les valeurs @@nil@@ et @@false@@ sont les deux seules valeurs qui sont considérées comme fausse par les tests. Toutes les autres valeurs, y compris @@0@@ et la chaîne vide @@""@@ sont vraies.

## Nombres : number

Le type {{.type number}} a pour valeurs les entiers et les réels (ou flottants). Les conversions de l'un vers l'autre type sont automatiques. Par défaut, entiers et réels sont stockés sur 64 bits.

{{end}}

{{.column}}

## Chaînes de caractères : string

Le type {{.type string}} unifie les caractères et les chaînes de caractères. Lua peut stocker les chaînes en UTF-8 mais ne sait pas comment les gérer.

Les chaînes sont immutables en Lua.

## Fonctions : function

Le type {{.type function}} sera plus étudié dans le chapitre suivant. Il s'agit de bloc de code écrit en Lua ou en C.

## Données utilisateurs : userdata

## Processus légers : thread

## Tables : table

### Définition

### Accès

### Métatable

{{end}}

{{end}}

# 3. Opérateurs

{{.row}}

{{.column}}

## Opérateurs binaires

### Opérateurs arithmétiques

### Opérateurs de comparaisons

### Opérateurs booléens

### Autres opérateurs

{{end}}

{{.column}}

## Opérateurs unaires

### Opérateurs arithmétiques

### Opérateurs booléens

{{end}}

{{end}}

# 4. Contrôle du flux

{{.row}}

{{.column}}

## Séquence

En Lua, le symbole pour terminer les instructions est @@;@@ mais il est totalement optionnel. Ce code est donc valide : @@a = 5 b = 6@@

## Conditions

Pour qu'une partie du code ne soit exécutée que si une condition est vrai, on utilisera @@if@@ :

@@@lua
if condition then
    actions
[ elseif condition then
    actions ] *
[ else
    actions ] ?
end
@@@

Sont considérées fausses les valeurs @@false@@ et @@nil@@. Toutes les autres valeurs sont vraies (dont @@{} "" 0@@).

## Répétitions

Boucle qui s'exécute ''tant que'' la condition est vraie avec @@while@@ :

@@@lua
while condition do
    actions
end
@@@

Le corps de la boucle (ses actions) sera exécuté entre 0 et n fois.

{{end}}

{{.column}}

Avec @@repeat@@, le corps de la boucle sera exécuté au moins une fois car la condition est testée après :

@@@lua
repeat
    actions
until condition
@@@

Autre grand classique des boucles, @@for@@ qui peut-être utilisé avec un intervalle numérique :

@@@lua
for identifiant = début, fin [ , pas ] do
    actions
end
@@@

Par défaut le pas est égal à 1 (si fin &lt; début, la boucle ne s'exécutera pas une seule fois).

Ou avec une table indexée par des nombres :

@@@lua
for indice, valeur in ipairs(table) do
    actions
end
@@@

Ou avec une table indexée par des chaînes :

@@@lua
for clé, valeur in pairs(table) do
    actions
end
@@@

Dans les trois cas, on peut utiliser le mot-clé @@break@@ pour sortir de la boucle.

Il n'y a pas de mot-clé ''continue'' ou ''next'' en Lua pour passer à l'itération suivante.

{{end}}

{{end}}

# 5. Fonctions

## Définition

## Appel

## Closure

# 6. Gestion des exceptions

## Appels protégés

# 7. Bibliothèque de base

## Sortie et entrée console

## Nombres

## Chaînes de caractères

## Tables

## Fichiers

# 8. Sites web

{{.row}}

{{.column}}

## Généraux

* [Site officiel du langage->https://www.lua.org], avec la distribution standard (interpréteur officiel + bibliothèque standard)
* La première édition, un peu datée, du livre électronique ''[Programming in Lua->https://www.lua.org/pil/contents.html]'' (ou PIL) introduit Lua avec de nombreux exemples.
* Le [wiki des utilisateurs->http://lua-users.org/wiki/] de Lua
* [Lua binaries->http://luabinaries.sourceforge.net/], distributions de Lua pour différents systèmes d'exploitation
* Page de [Wikipédia sur Lua->https://en.wikipedia.org/wiki/Lua_(programming_language)]
* Boutique officielle [Zazzle->https://www.zazzle.com/Lua_Store] pour supporter Lua via l'achat de goodies

## Bibliothèques

* [LuaRocks->https://luarocks.org/], gestionnaire de bibliothèques
* [Penlight->http://stevedonovan.github.io/Penlight/api/index.html], une librairie fondamentale
* [LPEG->http://www.inf.puc-rio.br/~roberto/lpeg/] pour du parsing
* [IUP->http://webserver2.tecgraf.puc-rio.br/iup/] pour les interfaces graphiques

{{end}}

{{.column}}

## Interpréteurs

* [Löve->https://love2d.org/], VM Lua mettant à disposition une bibliothèque pour faire des jeux
* [REPL.it->https://repl.it/languages/lua] interpréteur en ligne
* [MoonSharp->http://www.moonsharp.org/] interpréteur en C# pour .Net, Mono et Unity
* [Moonshine->http://moonshinejs.org/] interpréteur et VM en JavaScript

## Langages liés

* [Teal->https://github.com/teal-language/tl] surlangage avec des types.

## Outils

* [ZeroBrane Studio->https://studio.zerobrane.com/] un IDE léger, gratuit, simple et efficace

{{end}}

{{end}}

{{.sign}} Damien Gouteux Aide-mémoire Lua v0.1 2017-2021

{{end}}
{{end}}

