!const TITLE=Hamill
!const ICON=https://xitog.github.io/dgx/img/favicon.ico
!require https://xitog.github.io/dgx/css/simplex.bootstrap.css
!require https://xitog.github.io/dgx/css/palatino.css
!require https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js
!require https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js

!include menu.html

!html <div id="content-div">

# Hamill
---

Ce document décrit le langage **Hamill**. Comme [Markdown] ou [Textile], c'est un [langage de balisage léger] pour écrire de la documentation dans un fichier texte, directement lisible sans transformation, mais pouvant également être transformé en HTML.

On peut faire des commentaires en commençant une ligne par \-\-.

-- Ceci est un commentaire il ne sera pas exporté

!var EXPORT_COMMENT=true

-- Ceci est un commentaire il sera exporté en HTML

**LIMITATION : les commentaires doivent être sur une ligne séparée et non à la fin d'une ligne. Hamill risque de se tromper** (mélange entre @@!require@@ qui teste la fin de la ligne)

On peut faire une ligne horizontale avec une ligne constituée uniquement de - d'une longueur supérieure ou égale à 3.

On peut forcer un retour à la ligne avec \!\! entouré d'un espace : ceci est un retour !! à la ligne.

## Modification de texte

* \*\***gras**\*\* : pour mettre en gras
* \'\'''italique''\'\' : pour mettre en italique
* \-\---barré--\-\- : pour barré
* \_\___souligné__\_\_ : pour souligner
* \^\^^^exposant^^\^\^ : pour mettre en exposant

## Code

On utilise \@\@@@pour du code inline@@\@\@. Hamill dispose d'un colorisateur syntaxique pour Python et JSON, on précise ainsi : \@\@python@@python def function(par1, par2)@@\@\@.

Pour un bloc de code, il ya deux solutions :

On peut faire une ligne avec seulement \@\@ suivi éventuellement du langage qu'on souhaite puis des lignes avec \@\@ au début jusqu'à une ligne ne comportant que \@\@. Ainsi :

>>\@\@python
>>\@\@     # Ceci est un commentaire
>>\@\@     def function(par1, par2):
>>\@\@         return "Ceci est une fonction"
>>\@\@

Donnera :

@@python
@@    # Ceci est un commentaire
@@    def function(par1, par2):
@@        return "Ceci est une fonction"
@@

On peut également faire une ligne avec seulement \@\@\@ suivi éventuellement du langage qu'on souhaite puis des lignes __sans rien__ jusqu'à une ligne ne comportant que \@\@\@. Ainsi :

>>\@\@\@python
>>     # Ceci est un commentaire
>>     def function(par1, par2):
>>         return "Ceci est une fonction"
>>\@\@\@

Donnera :

@@@python
    # Ceci est un commentaire
    def function(par1, par2):
        return "Ceci est une fonction"
@@@

## Listes

* \* une liste non numérotée

- \- une autre liste non numérotée

% \% une liste numérotée

**LIMITATION : Hamill ne gère pas une inclusion d'une liste numérotée dans une non-numérotée et vice-versa.**

## Listes de définition

* $ indique une liste de définition. On fait suivre directement la définition en la précédant d'espaces.

## Tables

* Un tableau s'écrit ainsi : |col1|col2|col3|
* La ligne de titre doit être la première et séparée des autres par une ligne de tirets : |\-\-\-\-|

|Ceci|est|un  |tableau    |
|----|---|----|-----------|
|Il  |est|beau|mon tableau|

On peut mettre bien sûr des modificateurs de textes dans un tableau mais **LIMITATION : pas de listes dans un tableau pour l'instant** :

|^^Ceci^^|**est**|__un__            |''tableau''|
|-----------------------------------------------|
|Il      |est    |--beau-- différent|ce tableau.|

## Liens

* On utilise les crochets \[ nom affiché -> lien ]
* Le lien peut être directement http:// ou https://
* Ou le lien peut être une redirection \[ nom affiché -> code ] puis une défintion de la forme : \[code]: http://...
* Ou le lien peut être seulement **#**. Dans ce cas, il essaye de faire pointé sur le nom affiché ou, si c'est un titre, le nom affiché transformé ''(voir ci-dessous)''
* Les titres sont automatiquement transformés en ancre en remplaçant les espaces par - et en les mettant en minuscules : ainsi **Les jeux** devient **les-jeux**

## Constantes

On peut définir des constantes en mettant @@!const@@ en début de ligne. Les constantes peuvent être définies n'importe où dans le document et plusieurs fois mais **__seule la dernière valeur définie est prise en compte__**.

* @@!const TITLE=titre@@ pour définir le titre de la page
* @@!const ICON=icon@@ pour définir une icône pour la page
* @@!const LANG=lang@@ pour définir la langue utilisée dans la page
* @@!const ENCODING=encoding@@ pour définir la langue utilisée dans la page, par défaut utf-8
* @@!const BODY_CLASS=classe@@ pour définir la classe du body
* @@!const BODY_ID=id@@ pour définir l'id du body

## Variables

On peut définir des variables en mettant @@!var@@ en début de ligne. On peut changer sa valeur en la redéfinissant dans le document plusieurs fois. Au contraire des constantes, les variables sont lues au fur et à mesure de l'émission du HTML.

* @@!var EXPORT_COMMENT=true/false@@ spécifie si les commentaires seront exportés en HTML ou pas
* @@!var PARAGRAPH_DEFINITION=true/false@@ spécifie si les dd doivent être mis dans des balises p
* @@!var DEFAULT_CODE=python/json@@ définit la coloration syntaxique par défaut du code (text par défaut)
* @@!var NEXT_PAR_CLASS=cls@@ spécifie la classe du **prochain** paragraphe
* @@!var DEFAULT_PAR_CLASS=cls@@ spécifie la classe par défaut de **tous les paragraphes qui suivent**

## Inclusion de fichier HTML

On peut inclure un fichier HTML avec @@!include@@ en début de ligne. Le contenu du fichier sera copié directement le document produit.

## Liens vers un fichier CSS ou JavaScript

On peut lier notre document à fichier CSS ou JavaScript avec la commande @@!require@@ en début de ligne.

Le lien vers un fichier CSS requis est **automatiquement** placé dans la tête du document HTML.

Le lien vers un fichier JavaScript requis est placé là ou se trouve le @@!require@@. **LIMITATION : Hamill ne peut pas mettre un lien vers un fichier JavaScript dans la tête pour l'instant**.

## Spécial

* @@!css css-code@@ permet de rajouter du code css
* @@!html html-code@@ permet de rajouter du code html

[Markdown]: https://en.wikipedia.org/wiki/Markdown
[Textile]: https://en.wikipedia.org/wiki/Textile_(markup_language)
[langage de balisage léger]: https://en.wikipedia.org/wiki/Lightweight_markup_language

!html </div>
