
-- Modèle objet

class Personne

    $id_count = 0
  
    sub init(name, age, company=nil)
        $id_count += 1 -- affectation combinée
        @id = $id_count
        @name = name
        @age = age
        @company = company
        if @company != nil:
            @company.hire(self)
        end
    end

    fun to_s(-> str)
        @name + "(#{age})" -- #{} and not f"{}"
    end

    fun to_csv(-> str)
        "#{@id};" + @name + ";#{@age}\n"
    end

end

-- comment are like Lua    
class Company

    -- sub return nothing and to have it on the right side of an affectation raise an exception    
    sub init(@name) -- auto put @name = name NEW
        @employees = []
    end

    fun hire(Personne p -> int) -- the return type is IN the ( )
        if p.company == self and p not in @employees then -- not in
            raise Exception("Incoherent model. This employee should already be in @employees.")
        end
        if p.company == self and p in @employees then
            raise Exception("Can't hire someone already employed by this company.")
        end
        p.company = self
        @employees << p
        @employees.size -- auto return of the last value only for fun like rb
    end

    fun to_csv(-> str) -- MyCompany;1,2,3,4 <- id employee
        s = @name + ";"
        for p in @employees do
            s += "#{p.@id}," 
        end
        s += "\n"
    end

end

-- Création

p1 = new Personne("Bob", 32) -- new keyword to hightlight instance creation
p2 = new Personne("Stan", 24)
p3 = new Personne("Audrey", 26)

-- Ecriture

people_are = [p1, p2, p3]
f = new File('Personnes.txt', 'w')
for p in people_are
   f.write(p.to_csv)             
end
f.close()

-- Lecture et réécration

f = new File('Personnes.txt', 'r')
c = f.readlines()
f.close()
people = {}
for index, value in c do
    name, age = value.split(';')
    people[index] = Personne(name, age.chomp!)
end
for k, p in people:
    print(k, p)
end
