#------------------------------------------------------------------------------
# Fichier historique du projet langage de programmation
#------------------------------------------------------------------------------

Ceci est un fichier retrançant les différents stades du projet "langage" de 
programmation. Il y a déjà eu 5 itérations :

Arborix (durant l'été 2010, Python)
-------
Commentaire original : AST ! Trois étages : lexer parser interpreter Py
C'est là où j'ai découvert la puissance de l'Abstract Syntax Tree. C'est à dire
de ne plus directement interprété le langage mais de construire d'abord un 
arbre puis d'exécuter cette arbre. C'est ainsi qu'on peut gérer un 'while' de
façon simple. Cette découverte a été une vrai rupture, mettant en place dans
mon esprit toutes les notions abordées durant les TPs de l'INSA.
C'est là où s'établit l'architecture à trois étages initiales : un lexer (pour
les tokens), un parser (pour les règles) et un interpreter (pour exécuter l'AST
).

Pypo (fin en septembre 2010, Python)
----
Commentaire original : go go go Py
Je recommence mais "en mieux". Tellement enthousiaste que je fais un google
code project.

n (janvier 2011, Python)
-
Commentaire original : éviter les conflicts/reduces(1 voir 0 pour return expr).
Je recommence avec comme objectif d'éviter le plus possible les conflits de
shift/reduce qui devait être assez préoccupant dans Pypo.

Zembla (fin avril 2011, Ruby puis Python)
------
Commentaire original : 4 étages : lexer parser interpreter basiclib
Sans ply cette fois-ci je développe un petit interpréteur en ajoutant un étage:
celui pour la bibliothèque. On a donc l'architecture complète à présent.

nn (Python)
--
Commentaire original : Fusion du meilleur de n et zembla. 4 étages. Py.
On a donc là une re-reprise de n et Zembla en utillisant PLY. C'est l'itération
qui ira le plus loin, jusqu'en mai 2011. Après il y aura une accalmie.
Il y aura la fameuse release NNIfWhile6Mai2011.zip qui marquera "un certain
zénith" de cette version.

Calcoolette (22 Oct-1 Nov 2011, C)
-----------
Un essai en C de langage de programmation simple. Pour faire une calculette.
Sans Flex/Bison (Lex/Yacc), "à la main".

Simple (Janvier 2012, Python)
------
Une tentative de reprendre simplement les bases de PLY en Python. Reprise fin
Octobre 2012.

Tokenizer (premier semestre 2012, Python)
---------
Un essai de faire sans PLY en Python, en se basant sur l'expérience de
Calcoolette en C.

Calcoolette (sorti le 30 juin 2012, Python)
-----------
Un essai de faire sans PLY en Python en gérant toute la complexité en se
basant sur Tokenizer (ils partagent la même base commune mais ont divergés).

#------------------------------------------------------------------------------
# Annexes
#------------------------------------------------------------------------------

#
# Ancien frontispice du projet google code 'Pypo':
#

Project Summary

Basically, I want to target the python platform (with its huge available librairies set) but with a more friendly syntax (I mean without any radical ideology about tabs and ':').

It is not a production tool or whatever, and it is not competitive with high-level stuff like Pypy, but a way for me to explore Lex and Yacc and the arcane of language making.

If you find it useful, let me know! I would be as much delighted as surprised!

Yksin 

#
# Ancien frontispice du projet google code 'Calcoolette' (en C):
#

This a simple calculator in command line, written in C.

It features a simple Lexer / Parser / Interpreter structure written WITHOUT flex/bison.

Its primary goal is to experiment with these concepts, by making a code easy to follow (without code generation nor magical library except the standard librairies), to offer a service to its users, and finally to be the basis for a simple scripting language, but that's another story.

This is not "professional quality software", even if some truly ugly stuff are made under this label, and, even worse, sold! This is just a toy, and as its main programmer, it has the main advantage to bring me some fun. If, by the merest chance, it could be useful to someone, please, let me know, I will so delighted to ear that!

In the meantime, I'm going on with my little toy, if we meet and you are reading this, I wish you luck and happiness, wanderer!

D&G
