Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    WHILE
    SEMI
    NEWLINE
    COMMENT
    OPEN_SB
    PASS
    VAR
    NIL
    CLOSING_SB
    BOOL

Grammar

Rule 0     S' -> programme
Rule 1     programme -> programme statement
Rule 2     programme -> statement
Rule 3     programme -> <empty>
Rule 4     programme -> error
Rule 5     statement -> affectation
Rule 6     statement -> expression
Rule 7     statement -> if_sta
Rule 8     statement -> fct_call
Rule 9     affectation -> ID AFFECT expression
Rule 10    affectation -> ID ADD_AFF expression
Rule 11    affectation -> ID MIN_AFF expression
Rule 12    affectation -> ID MUL_AFF expression
Rule 13    affectation -> ID DIV_AFF expression
Rule 14    affectation -> ID MOD_AFF expression
Rule 15    affectation -> ID IDV_AFF expression
Rule 16    if_sta -> IF expression THEN programme ELSE programme END
Rule 17    if_sta -> IF expression THEN programme END
Rule 18    fct_call -> ID OPEN_PAR parameters CLOSING_PAR
Rule 19    parameters -> parameters COMMA expression
Rule 20    parameters -> expression
Rule 21    expression -> INT
Rule 22    expression -> FLOAT
Rule 23    expression -> ID
Rule 24    expression -> TRUE
Rule 25    expression -> FALSE
Rule 26    expression -> STRING
Rule 27    expression -> OPEN_PAR expression CLOSING_PAR
Rule 28    expression -> expression ADD expression
Rule 29    expression -> expression MIN expression
Rule 30    expression -> expression DIV expression
Rule 31    expression -> expression MUL expression
Rule 32    expression -> expression POW expression
Rule 33    expression -> expression MOD expression
Rule 34    expression -> expression INTDIV expression
Rule 35    expression -> expression AND expression
Rule 36    expression -> expression OR expression
Rule 37    expression -> expression EQ expression
Rule 38    expression -> expression NE expression
Rule 39    expression -> expression LT expression
Rule 40    expression -> expression LE expression
Rule 41    expression -> expression GT expression
Rule 42    expression -> expression GE expression
Rule 43    expression -> MIN expression
Rule 44    expression -> NOT expression

Terminals, with rules where they appear

ADD                  : 28
ADD_AFF              : 10
AFFECT               : 9
AND                  : 35
BOOL                 : 
CLOSING_PAR          : 18 27
CLOSING_SB           : 
COMMA                : 19
COMMENT              : 
DIV                  : 30
DIV_AFF              : 13
ELSE                 : 16
END                  : 16 17
EQ                   : 37
FALSE                : 25
FLOAT                : 22
GE                   : 42
GT                   : 41
ID                   : 9 10 11 12 13 14 15 18 23
IDV_AFF              : 15
IF                   : 16 17
INT                  : 21
INTDIV               : 34
LE                   : 40
LT                   : 39
MIN                  : 29 43
MIN_AFF              : 11
MOD                  : 33
MOD_AFF              : 14
MUL                  : 31
MUL_AFF              : 12
NE                   : 38
NEWLINE              : 
NIL                  : 
NOT                  : 44
OPEN_PAR             : 18 27
OPEN_SB              : 
OR                   : 36
PASS                 : 
POW                  : 32
SEMI                 : 
STRING               : 26
THEN                 : 16 17
TRUE                 : 24
VAR                  : 
WHILE                : 
error                : 4

Nonterminals, with rules where they appear

affectation          : 5
expression           : 6 9 10 11 12 13 14 15 16 17 19 20 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 44
fct_call             : 8
if_sta               : 7
parameters           : 18 19
programme            : 1 16 16 17 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . programme statement
    (2) programme -> . statement
    (3) programme -> .
    (4) programme -> . error
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for OPEN_PAR resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 3 (programme -> .)
    error           shift and go to state 14
    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

  ! ID              [ reduce using rule 3 (programme -> .) ]
  ! INT             [ reduce using rule 3 (programme -> .) ]
  ! FLOAT           [ reduce using rule 3 (programme -> .) ]
  ! TRUE            [ reduce using rule 3 (programme -> .) ]
  ! FALSE           [ reduce using rule 3 (programme -> .) ]
  ! STRING          [ reduce using rule 3 (programme -> .) ]
  ! OPEN_PAR        [ reduce using rule 3 (programme -> .) ]
  ! MIN             [ reduce using rule 3 (programme -> .) ]
  ! NOT             [ reduce using rule 3 (programme -> .) ]
  ! IF              [ reduce using rule 3 (programme -> .) ]

    fct_call                       shift and go to state 13
    statement                      shift and go to state 5
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16
    programme                      shift and go to state 17

state 1

    (43) expression -> MIN . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 19

state 2

    (5) statement -> affectation .

    ELSE            reduce using rule 5 (statement -> affectation .)
    END             reduce using rule 5 (statement -> affectation .)
    ID              reduce using rule 5 (statement -> affectation .)
    INT             reduce using rule 5 (statement -> affectation .)
    FLOAT           reduce using rule 5 (statement -> affectation .)
    TRUE            reduce using rule 5 (statement -> affectation .)
    FALSE           reduce using rule 5 (statement -> affectation .)
    STRING          reduce using rule 5 (statement -> affectation .)
    OPEN_PAR        reduce using rule 5 (statement -> affectation .)
    MIN             reduce using rule 5 (statement -> affectation .)
    NOT             reduce using rule 5 (statement -> affectation .)
    IF              reduce using rule 5 (statement -> affectation .)
    $end            reduce using rule 5 (statement -> affectation .)


state 3

    (24) expression -> TRUE .

    ADD             reduce using rule 24 (expression -> TRUE .)
    MIN             reduce using rule 24 (expression -> TRUE .)
    DIV             reduce using rule 24 (expression -> TRUE .)
    MUL             reduce using rule 24 (expression -> TRUE .)
    POW             reduce using rule 24 (expression -> TRUE .)
    MOD             reduce using rule 24 (expression -> TRUE .)
    INTDIV          reduce using rule 24 (expression -> TRUE .)
    AND             reduce using rule 24 (expression -> TRUE .)
    OR              reduce using rule 24 (expression -> TRUE .)
    EQ              reduce using rule 24 (expression -> TRUE .)
    NE              reduce using rule 24 (expression -> TRUE .)
    LT              reduce using rule 24 (expression -> TRUE .)
    LE              reduce using rule 24 (expression -> TRUE .)
    GT              reduce using rule 24 (expression -> TRUE .)
    GE              reduce using rule 24 (expression -> TRUE .)
    ID              reduce using rule 24 (expression -> TRUE .)
    INT             reduce using rule 24 (expression -> TRUE .)
    FLOAT           reduce using rule 24 (expression -> TRUE .)
    TRUE            reduce using rule 24 (expression -> TRUE .)
    FALSE           reduce using rule 24 (expression -> TRUE .)
    STRING          reduce using rule 24 (expression -> TRUE .)
    OPEN_PAR        reduce using rule 24 (expression -> TRUE .)
    NOT             reduce using rule 24 (expression -> TRUE .)
    IF              reduce using rule 24 (expression -> TRUE .)
    $end            reduce using rule 24 (expression -> TRUE .)
    CLOSING_PAR     reduce using rule 24 (expression -> TRUE .)
    THEN            reduce using rule 24 (expression -> TRUE .)
    COMMA           reduce using rule 24 (expression -> TRUE .)
    ELSE            reduce using rule 24 (expression -> TRUE .)
    END             reduce using rule 24 (expression -> TRUE .)


state 4

    (27) expression -> OPEN_PAR . expression CLOSING_PAR
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 20

state 5

    (2) programme -> statement .

    ELSE            reduce using rule 2 (programme -> statement .)
    END             reduce using rule 2 (programme -> statement .)
    ID              reduce using rule 2 (programme -> statement .)
    INT             reduce using rule 2 (programme -> statement .)
    FLOAT           reduce using rule 2 (programme -> statement .)
    TRUE            reduce using rule 2 (programme -> statement .)
    FALSE           reduce using rule 2 (programme -> statement .)
    STRING          reduce using rule 2 (programme -> statement .)
    OPEN_PAR        reduce using rule 2 (programme -> statement .)
    MIN             reduce using rule 2 (programme -> statement .)
    NOT             reduce using rule 2 (programme -> statement .)
    IF              reduce using rule 2 (programme -> statement .)
    $end            reduce using rule 2 (programme -> statement .)


state 6

    (7) statement -> if_sta .

    ELSE            reduce using rule 7 (statement -> if_sta .)
    END             reduce using rule 7 (statement -> if_sta .)
    ID              reduce using rule 7 (statement -> if_sta .)
    INT             reduce using rule 7 (statement -> if_sta .)
    FLOAT           reduce using rule 7 (statement -> if_sta .)
    TRUE            reduce using rule 7 (statement -> if_sta .)
    FALSE           reduce using rule 7 (statement -> if_sta .)
    STRING          reduce using rule 7 (statement -> if_sta .)
    OPEN_PAR        reduce using rule 7 (statement -> if_sta .)
    MIN             reduce using rule 7 (statement -> if_sta .)
    NOT             reduce using rule 7 (statement -> if_sta .)
    IF              reduce using rule 7 (statement -> if_sta .)
    $end            reduce using rule 7 (statement -> if_sta .)


state 7

    (26) expression -> STRING .

    ADD             reduce using rule 26 (expression -> STRING .)
    MIN             reduce using rule 26 (expression -> STRING .)
    DIV             reduce using rule 26 (expression -> STRING .)
    MUL             reduce using rule 26 (expression -> STRING .)
    POW             reduce using rule 26 (expression -> STRING .)
    MOD             reduce using rule 26 (expression -> STRING .)
    INTDIV          reduce using rule 26 (expression -> STRING .)
    AND             reduce using rule 26 (expression -> STRING .)
    OR              reduce using rule 26 (expression -> STRING .)
    EQ              reduce using rule 26 (expression -> STRING .)
    NE              reduce using rule 26 (expression -> STRING .)
    LT              reduce using rule 26 (expression -> STRING .)
    LE              reduce using rule 26 (expression -> STRING .)
    GT              reduce using rule 26 (expression -> STRING .)
    GE              reduce using rule 26 (expression -> STRING .)
    ID              reduce using rule 26 (expression -> STRING .)
    INT             reduce using rule 26 (expression -> STRING .)
    FLOAT           reduce using rule 26 (expression -> STRING .)
    TRUE            reduce using rule 26 (expression -> STRING .)
    FALSE           reduce using rule 26 (expression -> STRING .)
    STRING          reduce using rule 26 (expression -> STRING .)
    OPEN_PAR        reduce using rule 26 (expression -> STRING .)
    NOT             reduce using rule 26 (expression -> STRING .)
    IF              reduce using rule 26 (expression -> STRING .)
    $end            reduce using rule 26 (expression -> STRING .)
    CLOSING_PAR     reduce using rule 26 (expression -> STRING .)
    THEN            reduce using rule 26 (expression -> STRING .)
    COMMA           reduce using rule 26 (expression -> STRING .)
    ELSE            reduce using rule 26 (expression -> STRING .)
    END             reduce using rule 26 (expression -> STRING .)


state 8

    (25) expression -> FALSE .

    ADD             reduce using rule 25 (expression -> FALSE .)
    MIN             reduce using rule 25 (expression -> FALSE .)
    DIV             reduce using rule 25 (expression -> FALSE .)
    MUL             reduce using rule 25 (expression -> FALSE .)
    POW             reduce using rule 25 (expression -> FALSE .)
    MOD             reduce using rule 25 (expression -> FALSE .)
    INTDIV          reduce using rule 25 (expression -> FALSE .)
    AND             reduce using rule 25 (expression -> FALSE .)
    OR              reduce using rule 25 (expression -> FALSE .)
    EQ              reduce using rule 25 (expression -> FALSE .)
    NE              reduce using rule 25 (expression -> FALSE .)
    LT              reduce using rule 25 (expression -> FALSE .)
    LE              reduce using rule 25 (expression -> FALSE .)
    GT              reduce using rule 25 (expression -> FALSE .)
    GE              reduce using rule 25 (expression -> FALSE .)
    ID              reduce using rule 25 (expression -> FALSE .)
    INT             reduce using rule 25 (expression -> FALSE .)
    FLOAT           reduce using rule 25 (expression -> FALSE .)
    TRUE            reduce using rule 25 (expression -> FALSE .)
    FALSE           reduce using rule 25 (expression -> FALSE .)
    STRING          reduce using rule 25 (expression -> FALSE .)
    OPEN_PAR        reduce using rule 25 (expression -> FALSE .)
    NOT             reduce using rule 25 (expression -> FALSE .)
    IF              reduce using rule 25 (expression -> FALSE .)
    $end            reduce using rule 25 (expression -> FALSE .)
    CLOSING_PAR     reduce using rule 25 (expression -> FALSE .)
    THEN            reduce using rule 25 (expression -> FALSE .)
    COMMA           reduce using rule 25 (expression -> FALSE .)
    ELSE            reduce using rule 25 (expression -> FALSE .)
    END             reduce using rule 25 (expression -> FALSE .)


state 9

    (9) affectation -> ID . AFFECT expression
    (10) affectation -> ID . ADD_AFF expression
    (11) affectation -> ID . MIN_AFF expression
    (12) affectation -> ID . MUL_AFF expression
    (13) affectation -> ID . DIV_AFF expression
    (14) affectation -> ID . MOD_AFF expression
    (15) affectation -> ID . IDV_AFF expression
    (23) expression -> ID .
    (18) fct_call -> ID . OPEN_PAR parameters CLOSING_PAR

  ! shift/reduce conflict for OPEN_PAR resolved as shift
    AFFECT          shift and go to state 27
    ADD_AFF         shift and go to state 28
    MIN_AFF         shift and go to state 23
    MUL_AFF         shift and go to state 24
    DIV_AFF         shift and go to state 25
    MOD_AFF         shift and go to state 26
    IDV_AFF         shift and go to state 22
    ADD             reduce using rule 23 (expression -> ID .)
    MIN             reduce using rule 23 (expression -> ID .)
    DIV             reduce using rule 23 (expression -> ID .)
    MUL             reduce using rule 23 (expression -> ID .)
    POW             reduce using rule 23 (expression -> ID .)
    MOD             reduce using rule 23 (expression -> ID .)
    INTDIV          reduce using rule 23 (expression -> ID .)
    AND             reduce using rule 23 (expression -> ID .)
    OR              reduce using rule 23 (expression -> ID .)
    EQ              reduce using rule 23 (expression -> ID .)
    NE              reduce using rule 23 (expression -> ID .)
    LT              reduce using rule 23 (expression -> ID .)
    LE              reduce using rule 23 (expression -> ID .)
    GT              reduce using rule 23 (expression -> ID .)
    GE              reduce using rule 23 (expression -> ID .)
    ELSE            reduce using rule 23 (expression -> ID .)
    END             reduce using rule 23 (expression -> ID .)
    ID              reduce using rule 23 (expression -> ID .)
    INT             reduce using rule 23 (expression -> ID .)
    FLOAT           reduce using rule 23 (expression -> ID .)
    TRUE            reduce using rule 23 (expression -> ID .)
    FALSE           reduce using rule 23 (expression -> ID .)
    STRING          reduce using rule 23 (expression -> ID .)
    NOT             reduce using rule 23 (expression -> ID .)
    IF              reduce using rule 23 (expression -> ID .)
    $end            reduce using rule 23 (expression -> ID .)
    OPEN_PAR        shift and go to state 21

  ! OPEN_PAR        [ reduce using rule 23 (expression -> ID .) ]


state 10

    (16) if_sta -> IF . expression THEN programme ELSE programme END
    (17) if_sta -> IF . expression THEN programme END
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 29

state 11

    (21) expression -> INT .

    ADD             reduce using rule 21 (expression -> INT .)
    MIN             reduce using rule 21 (expression -> INT .)
    DIV             reduce using rule 21 (expression -> INT .)
    MUL             reduce using rule 21 (expression -> INT .)
    POW             reduce using rule 21 (expression -> INT .)
    MOD             reduce using rule 21 (expression -> INT .)
    INTDIV          reduce using rule 21 (expression -> INT .)
    AND             reduce using rule 21 (expression -> INT .)
    OR              reduce using rule 21 (expression -> INT .)
    EQ              reduce using rule 21 (expression -> INT .)
    NE              reduce using rule 21 (expression -> INT .)
    LT              reduce using rule 21 (expression -> INT .)
    LE              reduce using rule 21 (expression -> INT .)
    GT              reduce using rule 21 (expression -> INT .)
    GE              reduce using rule 21 (expression -> INT .)
    ID              reduce using rule 21 (expression -> INT .)
    INT             reduce using rule 21 (expression -> INT .)
    FLOAT           reduce using rule 21 (expression -> INT .)
    TRUE            reduce using rule 21 (expression -> INT .)
    FALSE           reduce using rule 21 (expression -> INT .)
    STRING          reduce using rule 21 (expression -> INT .)
    OPEN_PAR        reduce using rule 21 (expression -> INT .)
    NOT             reduce using rule 21 (expression -> INT .)
    IF              reduce using rule 21 (expression -> INT .)
    $end            reduce using rule 21 (expression -> INT .)
    CLOSING_PAR     reduce using rule 21 (expression -> INT .)
    THEN            reduce using rule 21 (expression -> INT .)
    COMMA           reduce using rule 21 (expression -> INT .)
    ELSE            reduce using rule 21 (expression -> INT .)
    END             reduce using rule 21 (expression -> INT .)


state 12

    (22) expression -> FLOAT .

    ADD             reduce using rule 22 (expression -> FLOAT .)
    MIN             reduce using rule 22 (expression -> FLOAT .)
    DIV             reduce using rule 22 (expression -> FLOAT .)
    MUL             reduce using rule 22 (expression -> FLOAT .)
    POW             reduce using rule 22 (expression -> FLOAT .)
    MOD             reduce using rule 22 (expression -> FLOAT .)
    INTDIV          reduce using rule 22 (expression -> FLOAT .)
    AND             reduce using rule 22 (expression -> FLOAT .)
    OR              reduce using rule 22 (expression -> FLOAT .)
    EQ              reduce using rule 22 (expression -> FLOAT .)
    NE              reduce using rule 22 (expression -> FLOAT .)
    LT              reduce using rule 22 (expression -> FLOAT .)
    LE              reduce using rule 22 (expression -> FLOAT .)
    GT              reduce using rule 22 (expression -> FLOAT .)
    GE              reduce using rule 22 (expression -> FLOAT .)
    ID              reduce using rule 22 (expression -> FLOAT .)
    INT             reduce using rule 22 (expression -> FLOAT .)
    FLOAT           reduce using rule 22 (expression -> FLOAT .)
    TRUE            reduce using rule 22 (expression -> FLOAT .)
    FALSE           reduce using rule 22 (expression -> FLOAT .)
    STRING          reduce using rule 22 (expression -> FLOAT .)
    OPEN_PAR        reduce using rule 22 (expression -> FLOAT .)
    NOT             reduce using rule 22 (expression -> FLOAT .)
    IF              reduce using rule 22 (expression -> FLOAT .)
    $end            reduce using rule 22 (expression -> FLOAT .)
    CLOSING_PAR     reduce using rule 22 (expression -> FLOAT .)
    THEN            reduce using rule 22 (expression -> FLOAT .)
    COMMA           reduce using rule 22 (expression -> FLOAT .)
    ELSE            reduce using rule 22 (expression -> FLOAT .)
    END             reduce using rule 22 (expression -> FLOAT .)


state 13

    (8) statement -> fct_call .

    ELSE            reduce using rule 8 (statement -> fct_call .)
    END             reduce using rule 8 (statement -> fct_call .)
    ID              reduce using rule 8 (statement -> fct_call .)
    INT             reduce using rule 8 (statement -> fct_call .)
    FLOAT           reduce using rule 8 (statement -> fct_call .)
    TRUE            reduce using rule 8 (statement -> fct_call .)
    FALSE           reduce using rule 8 (statement -> fct_call .)
    STRING          reduce using rule 8 (statement -> fct_call .)
    OPEN_PAR        reduce using rule 8 (statement -> fct_call .)
    MIN             reduce using rule 8 (statement -> fct_call .)
    NOT             reduce using rule 8 (statement -> fct_call .)
    IF              reduce using rule 8 (statement -> fct_call .)
    $end            reduce using rule 8 (statement -> fct_call .)


state 14

    (4) programme -> error .

    ELSE            reduce using rule 4 (programme -> error .)
    END             reduce using rule 4 (programme -> error .)
    ID              reduce using rule 4 (programme -> error .)
    INT             reduce using rule 4 (programme -> error .)
    FLOAT           reduce using rule 4 (programme -> error .)
    TRUE            reduce using rule 4 (programme -> error .)
    FALSE           reduce using rule 4 (programme -> error .)
    STRING          reduce using rule 4 (programme -> error .)
    OPEN_PAR        reduce using rule 4 (programme -> error .)
    MIN             reduce using rule 4 (programme -> error .)
    NOT             reduce using rule 4 (programme -> error .)
    IF              reduce using rule 4 (programme -> error .)
    $end            reduce using rule 4 (programme -> error .)


state 15

    (44) expression -> NOT . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 30

state 16

    (6) statement -> expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 6 (statement -> expression .)
    END             reduce using rule 6 (statement -> expression .)
    ID              reduce using rule 6 (statement -> expression .)
    INT             reduce using rule 6 (statement -> expression .)
    FLOAT           reduce using rule 6 (statement -> expression .)
    TRUE            reduce using rule 6 (statement -> expression .)
    FALSE           reduce using rule 6 (statement -> expression .)
    STRING          reduce using rule 6 (statement -> expression .)
    OPEN_PAR        reduce using rule 6 (statement -> expression .)
    NOT             reduce using rule 6 (statement -> expression .)
    IF              reduce using rule 6 (statement -> expression .)
    $end            reduce using rule 6 (statement -> expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 6 (statement -> expression .) ]


state 17

    (0) S' -> programme .
    (1) programme -> programme . statement
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

    fct_call                       shift and go to state 13
    statement                      shift and go to state 46
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16

state 18

    (23) expression -> ID .

    ADD             reduce using rule 23 (expression -> ID .)
    MIN             reduce using rule 23 (expression -> ID .)
    DIV             reduce using rule 23 (expression -> ID .)
    MUL             reduce using rule 23 (expression -> ID .)
    POW             reduce using rule 23 (expression -> ID .)
    MOD             reduce using rule 23 (expression -> ID .)
    INTDIV          reduce using rule 23 (expression -> ID .)
    AND             reduce using rule 23 (expression -> ID .)
    OR              reduce using rule 23 (expression -> ID .)
    EQ              reduce using rule 23 (expression -> ID .)
    NE              reduce using rule 23 (expression -> ID .)
    LT              reduce using rule 23 (expression -> ID .)
    LE              reduce using rule 23 (expression -> ID .)
    GT              reduce using rule 23 (expression -> ID .)
    GE              reduce using rule 23 (expression -> ID .)
    ID              reduce using rule 23 (expression -> ID .)
    INT             reduce using rule 23 (expression -> ID .)
    FLOAT           reduce using rule 23 (expression -> ID .)
    TRUE            reduce using rule 23 (expression -> ID .)
    FALSE           reduce using rule 23 (expression -> ID .)
    STRING          reduce using rule 23 (expression -> ID .)
    OPEN_PAR        reduce using rule 23 (expression -> ID .)
    NOT             reduce using rule 23 (expression -> ID .)
    IF              reduce using rule 23 (expression -> ID .)
    $end            reduce using rule 23 (expression -> ID .)
    CLOSING_PAR     reduce using rule 23 (expression -> ID .)
    THEN            reduce using rule 23 (expression -> ID .)
    COMMA           reduce using rule 23 (expression -> ID .)
    ELSE            reduce using rule 23 (expression -> ID .)
    END             reduce using rule 23 (expression -> ID .)


state 19

    (43) expression -> MIN expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 43 (expression -> MIN expression .)
    MIN             reduce using rule 43 (expression -> MIN expression .)
    DIV             reduce using rule 43 (expression -> MIN expression .)
    MUL             reduce using rule 43 (expression -> MIN expression .)
    POW             reduce using rule 43 (expression -> MIN expression .)
    MOD             reduce using rule 43 (expression -> MIN expression .)
    INTDIV          reduce using rule 43 (expression -> MIN expression .)
    AND             reduce using rule 43 (expression -> MIN expression .)
    OR              reduce using rule 43 (expression -> MIN expression .)
    EQ              reduce using rule 43 (expression -> MIN expression .)
    NE              reduce using rule 43 (expression -> MIN expression .)
    LT              reduce using rule 43 (expression -> MIN expression .)
    LE              reduce using rule 43 (expression -> MIN expression .)
    GT              reduce using rule 43 (expression -> MIN expression .)
    GE              reduce using rule 43 (expression -> MIN expression .)
    ID              reduce using rule 43 (expression -> MIN expression .)
    INT             reduce using rule 43 (expression -> MIN expression .)
    FLOAT           reduce using rule 43 (expression -> MIN expression .)
    TRUE            reduce using rule 43 (expression -> MIN expression .)
    FALSE           reduce using rule 43 (expression -> MIN expression .)
    STRING          reduce using rule 43 (expression -> MIN expression .)
    OPEN_PAR        reduce using rule 43 (expression -> MIN expression .)
    NOT             reduce using rule 43 (expression -> MIN expression .)
    IF              reduce using rule 43 (expression -> MIN expression .)
    $end            reduce using rule 43 (expression -> MIN expression .)
    CLOSING_PAR     reduce using rule 43 (expression -> MIN expression .)
    THEN            reduce using rule 43 (expression -> MIN expression .)
    COMMA           reduce using rule 43 (expression -> MIN expression .)
    ELSE            reduce using rule 43 (expression -> MIN expression .)
    END             reduce using rule 43 (expression -> MIN expression .)

  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! DIV             [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 42 ]
  ! POW             [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 20

    (27) expression -> OPEN_PAR expression . CLOSING_PAR
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    CLOSING_PAR     shift and go to state 47
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32


state 21

    (18) fct_call -> ID OPEN_PAR . parameters CLOSING_PAR
    (19) parameters -> . parameters COMMA expression
    (20) parameters -> . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 49
    parameters                     shift and go to state 48

state 22

    (15) affectation -> ID IDV_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 50

state 23

    (11) affectation -> ID MIN_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 51

state 24

    (12) affectation -> ID MUL_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 52

state 25

    (13) affectation -> ID DIV_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 53

state 26

    (14) affectation -> ID MOD_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 54

state 27

    (9) affectation -> ID AFFECT . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 55

state 28

    (10) affectation -> ID ADD_AFF . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 56

state 29

    (16) if_sta -> IF expression . THEN programme ELSE programme END
    (17) if_sta -> IF expression . THEN programme END
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    THEN            shift and go to state 57
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32


state 30

    (44) expression -> NOT expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 44 (expression -> NOT expression .)
    INT             reduce using rule 44 (expression -> NOT expression .)
    FLOAT           reduce using rule 44 (expression -> NOT expression .)
    TRUE            reduce using rule 44 (expression -> NOT expression .)
    FALSE           reduce using rule 44 (expression -> NOT expression .)
    STRING          reduce using rule 44 (expression -> NOT expression .)
    OPEN_PAR        reduce using rule 44 (expression -> NOT expression .)
    NOT             reduce using rule 44 (expression -> NOT expression .)
    IF              reduce using rule 44 (expression -> NOT expression .)
    $end            reduce using rule 44 (expression -> NOT expression .)
    CLOSING_PAR     reduce using rule 44 (expression -> NOT expression .)
    THEN            reduce using rule 44 (expression -> NOT expression .)
    COMMA           reduce using rule 44 (expression -> NOT expression .)
    ELSE            reduce using rule 44 (expression -> NOT expression .)
    END             reduce using rule 44 (expression -> NOT expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! MIN             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! INTDIV          [ reduce using rule 44 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 44 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! NE              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 44 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 44 (expression -> NOT expression .) ]


state 31

    (35) expression -> expression AND . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 58

state 32

    (42) expression -> expression GE . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 59

state 33

    (34) expression -> expression INTDIV . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 60

state 34

    (40) expression -> expression LE . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 61

state 35

    (37) expression -> expression EQ . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 62

state 36

    (29) expression -> expression MIN . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 63

state 37

    (32) expression -> expression POW . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 64

state 38

    (38) expression -> expression NE . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 65

state 39

    (39) expression -> expression LT . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 66

state 40

    (28) expression -> expression ADD . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 67

state 41

    (41) expression -> expression GT . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 68

state 42

    (31) expression -> expression MUL . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 69

state 43

    (30) expression -> expression DIV . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 70

state 44

    (36) expression -> expression OR . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 71

state 45

    (33) expression -> expression MOD . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 72

state 46

    (1) programme -> programme statement .

    ELSE            reduce using rule 1 (programme -> programme statement .)
    END             reduce using rule 1 (programme -> programme statement .)
    ID              reduce using rule 1 (programme -> programme statement .)
    INT             reduce using rule 1 (programme -> programme statement .)
    FLOAT           reduce using rule 1 (programme -> programme statement .)
    TRUE            reduce using rule 1 (programme -> programme statement .)
    FALSE           reduce using rule 1 (programme -> programme statement .)
    STRING          reduce using rule 1 (programme -> programme statement .)
    OPEN_PAR        reduce using rule 1 (programme -> programme statement .)
    MIN             reduce using rule 1 (programme -> programme statement .)
    NOT             reduce using rule 1 (programme -> programme statement .)
    IF              reduce using rule 1 (programme -> programme statement .)
    $end            reduce using rule 1 (programme -> programme statement .)


state 47

    (27) expression -> OPEN_PAR expression CLOSING_PAR .

    ADD             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    MIN             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    DIV             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    MUL             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    POW             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    MOD             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    INTDIV          reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    AND             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    OR              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    EQ              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    NE              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    LT              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    LE              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    GT              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    GE              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    ID              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    INT             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    FLOAT           reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    TRUE            reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    FALSE           reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    STRING          reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    OPEN_PAR        reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    NOT             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    IF              reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    $end            reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    CLOSING_PAR     reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    THEN            reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    COMMA           reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    ELSE            reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)
    END             reduce using rule 27 (expression -> OPEN_PAR expression CLOSING_PAR .)


state 48

    (18) fct_call -> ID OPEN_PAR parameters . CLOSING_PAR
    (19) parameters -> parameters . COMMA expression

    CLOSING_PAR     shift and go to state 73
    COMMA           shift and go to state 74


state 49

    (20) parameters -> expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    CLOSING_PAR     reduce using rule 20 (parameters -> expression .)
    COMMA           reduce using rule 20 (parameters -> expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32


state 50

    (15) affectation -> ID IDV_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    END             reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    ID              reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    INT             reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    FLOAT           reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    TRUE            reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    FALSE           reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    STRING          reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    OPEN_PAR        reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    NOT             reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    IF              reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    $end            reduce using rule 15 (affectation -> ID IDV_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 15 (affectation -> ID IDV_AFF expression .) ]


state 51

    (11) affectation -> ID MIN_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    END             reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    ID              reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    INT             reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    FLOAT           reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    TRUE            reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    FALSE           reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    STRING          reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    OPEN_PAR        reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    NOT             reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    IF              reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    $end            reduce using rule 11 (affectation -> ID MIN_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 11 (affectation -> ID MIN_AFF expression .) ]


state 52

    (12) affectation -> ID MUL_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    END             reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    ID              reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    INT             reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    FLOAT           reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    TRUE            reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    FALSE           reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    STRING          reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    OPEN_PAR        reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    NOT             reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    IF              reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    $end            reduce using rule 12 (affectation -> ID MUL_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 12 (affectation -> ID MUL_AFF expression .) ]


state 53

    (13) affectation -> ID DIV_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    END             reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    ID              reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    INT             reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    FLOAT           reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    TRUE            reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    FALSE           reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    STRING          reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    OPEN_PAR        reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    NOT             reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    IF              reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    $end            reduce using rule 13 (affectation -> ID DIV_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 13 (affectation -> ID DIV_AFF expression .) ]


state 54

    (14) affectation -> ID MOD_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    END             reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    ID              reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    INT             reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    FLOAT           reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    TRUE            reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    FALSE           reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    STRING          reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    OPEN_PAR        reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    NOT             reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    IF              reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    $end            reduce using rule 14 (affectation -> ID MOD_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 14 (affectation -> ID MOD_AFF expression .) ]


state 55

    (9) affectation -> ID AFFECT expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 9 (affectation -> ID AFFECT expression .)
    END             reduce using rule 9 (affectation -> ID AFFECT expression .)
    ID              reduce using rule 9 (affectation -> ID AFFECT expression .)
    INT             reduce using rule 9 (affectation -> ID AFFECT expression .)
    FLOAT           reduce using rule 9 (affectation -> ID AFFECT expression .)
    TRUE            reduce using rule 9 (affectation -> ID AFFECT expression .)
    FALSE           reduce using rule 9 (affectation -> ID AFFECT expression .)
    STRING          reduce using rule 9 (affectation -> ID AFFECT expression .)
    OPEN_PAR        reduce using rule 9 (affectation -> ID AFFECT expression .)
    NOT             reduce using rule 9 (affectation -> ID AFFECT expression .)
    IF              reduce using rule 9 (affectation -> ID AFFECT expression .)
    $end            reduce using rule 9 (affectation -> ID AFFECT expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 9 (affectation -> ID AFFECT expression .) ]


state 56

    (10) affectation -> ID ADD_AFF expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for MIN resolved as shift
    ELSE            reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    END             reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    ID              reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    INT             reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    FLOAT           reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    TRUE            reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    FALSE           reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    STRING          reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    OPEN_PAR        reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    NOT             reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    IF              reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    $end            reduce using rule 10 (affectation -> ID ADD_AFF expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! MIN             [ reduce using rule 10 (affectation -> ID ADD_AFF expression .) ]


state 57

    (16) if_sta -> IF expression THEN . programme ELSE programme END
    (17) if_sta -> IF expression THEN . programme END
    (1) programme -> . programme statement
    (2) programme -> . statement
    (3) programme -> .
    (4) programme -> . error
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for OPEN_PAR resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 3 (programme -> .)
    END             reduce using rule 3 (programme -> .)
    error           shift and go to state 14
    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

  ! ID              [ reduce using rule 3 (programme -> .) ]
  ! INT             [ reduce using rule 3 (programme -> .) ]
  ! FLOAT           [ reduce using rule 3 (programme -> .) ]
  ! TRUE            [ reduce using rule 3 (programme -> .) ]
  ! FALSE           [ reduce using rule 3 (programme -> .) ]
  ! STRING          [ reduce using rule 3 (programme -> .) ]
  ! OPEN_PAR        [ reduce using rule 3 (programme -> .) ]
  ! MIN             [ reduce using rule 3 (programme -> .) ]
  ! NOT             [ reduce using rule 3 (programme -> .) ]
  ! IF              [ reduce using rule 3 (programme -> .) ]

    fct_call                       shift and go to state 13
    statement                      shift and go to state 5
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16
    programme                      shift and go to state 75

state 58

    (35) expression -> expression AND expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 35 (expression -> expression AND expression .)
    INT             reduce using rule 35 (expression -> expression AND expression .)
    FLOAT           reduce using rule 35 (expression -> expression AND expression .)
    TRUE            reduce using rule 35 (expression -> expression AND expression .)
    FALSE           reduce using rule 35 (expression -> expression AND expression .)
    STRING          reduce using rule 35 (expression -> expression AND expression .)
    OPEN_PAR        reduce using rule 35 (expression -> expression AND expression .)
    NOT             reduce using rule 35 (expression -> expression AND expression .)
    IF              reduce using rule 35 (expression -> expression AND expression .)
    $end            reduce using rule 35 (expression -> expression AND expression .)
    CLOSING_PAR     reduce using rule 35 (expression -> expression AND expression .)
    THEN            reduce using rule 35 (expression -> expression AND expression .)
    COMMA           reduce using rule 35 (expression -> expression AND expression .)
    ELSE            reduce using rule 35 (expression -> expression AND expression .)
    END             reduce using rule 35 (expression -> expression AND expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! MIN             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! INTDIV          [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 35 (expression -> expression AND expression .) ]


state 59

    (42) expression -> expression GE expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 42 (expression -> expression GE expression .)
    INT             reduce using rule 42 (expression -> expression GE expression .)
    FLOAT           reduce using rule 42 (expression -> expression GE expression .)
    TRUE            reduce using rule 42 (expression -> expression GE expression .)
    FALSE           reduce using rule 42 (expression -> expression GE expression .)
    STRING          reduce using rule 42 (expression -> expression GE expression .)
    OPEN_PAR        reduce using rule 42 (expression -> expression GE expression .)
    NOT             reduce using rule 42 (expression -> expression GE expression .)
    IF              reduce using rule 42 (expression -> expression GE expression .)
    $end            reduce using rule 42 (expression -> expression GE expression .)
    CLOSING_PAR     reduce using rule 42 (expression -> expression GE expression .)
    THEN            reduce using rule 42 (expression -> expression GE expression .)
    COMMA           reduce using rule 42 (expression -> expression GE expression .)
    ELSE            reduce using rule 42 (expression -> expression GE expression .)
    END             reduce using rule 42 (expression -> expression GE expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! MIN             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! MUL             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! POW             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! INTDIV          [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 42 (expression -> expression GE expression .) ]


state 60

    (34) expression -> expression INTDIV expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 34 (expression -> expression INTDIV expression .)
    INT             reduce using rule 34 (expression -> expression INTDIV expression .)
    FLOAT           reduce using rule 34 (expression -> expression INTDIV expression .)
    TRUE            reduce using rule 34 (expression -> expression INTDIV expression .)
    FALSE           reduce using rule 34 (expression -> expression INTDIV expression .)
    STRING          reduce using rule 34 (expression -> expression INTDIV expression .)
    OPEN_PAR        reduce using rule 34 (expression -> expression INTDIV expression .)
    NOT             reduce using rule 34 (expression -> expression INTDIV expression .)
    IF              reduce using rule 34 (expression -> expression INTDIV expression .)
    $end            reduce using rule 34 (expression -> expression INTDIV expression .)
    CLOSING_PAR     reduce using rule 34 (expression -> expression INTDIV expression .)
    THEN            reduce using rule 34 (expression -> expression INTDIV expression .)
    COMMA           reduce using rule 34 (expression -> expression INTDIV expression .)
    ELSE            reduce using rule 34 (expression -> expression INTDIV expression .)
    END             reduce using rule 34 (expression -> expression INTDIV expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! MIN             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! POW             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! INTDIV          [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! AND             [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! EQ              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! NE              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! LT              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! LE              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! GT              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]
  ! GE              [ reduce using rule 34 (expression -> expression INTDIV expression .) ]


state 61

    (40) expression -> expression LE expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 40 (expression -> expression LE expression .)
    INT             reduce using rule 40 (expression -> expression LE expression .)
    FLOAT           reduce using rule 40 (expression -> expression LE expression .)
    TRUE            reduce using rule 40 (expression -> expression LE expression .)
    FALSE           reduce using rule 40 (expression -> expression LE expression .)
    STRING          reduce using rule 40 (expression -> expression LE expression .)
    OPEN_PAR        reduce using rule 40 (expression -> expression LE expression .)
    NOT             reduce using rule 40 (expression -> expression LE expression .)
    IF              reduce using rule 40 (expression -> expression LE expression .)
    $end            reduce using rule 40 (expression -> expression LE expression .)
    CLOSING_PAR     reduce using rule 40 (expression -> expression LE expression .)
    THEN            reduce using rule 40 (expression -> expression LE expression .)
    COMMA           reduce using rule 40 (expression -> expression LE expression .)
    ELSE            reduce using rule 40 (expression -> expression LE expression .)
    END             reduce using rule 40 (expression -> expression LE expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! MIN             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! MUL             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! POW             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! INTDIV          [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 40 (expression -> expression LE expression .) ]


state 62

    (37) expression -> expression EQ expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 37 (expression -> expression EQ expression .)
    INT             reduce using rule 37 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 37 (expression -> expression EQ expression .)
    TRUE            reduce using rule 37 (expression -> expression EQ expression .)
    FALSE           reduce using rule 37 (expression -> expression EQ expression .)
    STRING          reduce using rule 37 (expression -> expression EQ expression .)
    OPEN_PAR        reduce using rule 37 (expression -> expression EQ expression .)
    NOT             reduce using rule 37 (expression -> expression EQ expression .)
    IF              reduce using rule 37 (expression -> expression EQ expression .)
    $end            reduce using rule 37 (expression -> expression EQ expression .)
    CLOSING_PAR     reduce using rule 37 (expression -> expression EQ expression .)
    THEN            reduce using rule 37 (expression -> expression EQ expression .)
    COMMA           reduce using rule 37 (expression -> expression EQ expression .)
    ELSE            reduce using rule 37 (expression -> expression EQ expression .)
    END             reduce using rule 37 (expression -> expression EQ expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! MIN             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! POW             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! INTDIV          [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 37 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 37 (expression -> expression EQ expression .) ]


state 63

    (29) expression -> expression MIN expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 29 (expression -> expression MIN expression .)
    MIN             reduce using rule 29 (expression -> expression MIN expression .)
    MOD             reduce using rule 29 (expression -> expression MIN expression .)
    INTDIV          reduce using rule 29 (expression -> expression MIN expression .)
    AND             reduce using rule 29 (expression -> expression MIN expression .)
    OR              reduce using rule 29 (expression -> expression MIN expression .)
    EQ              reduce using rule 29 (expression -> expression MIN expression .)
    NE              reduce using rule 29 (expression -> expression MIN expression .)
    LT              reduce using rule 29 (expression -> expression MIN expression .)
    LE              reduce using rule 29 (expression -> expression MIN expression .)
    GT              reduce using rule 29 (expression -> expression MIN expression .)
    GE              reduce using rule 29 (expression -> expression MIN expression .)
    ID              reduce using rule 29 (expression -> expression MIN expression .)
    INT             reduce using rule 29 (expression -> expression MIN expression .)
    FLOAT           reduce using rule 29 (expression -> expression MIN expression .)
    TRUE            reduce using rule 29 (expression -> expression MIN expression .)
    FALSE           reduce using rule 29 (expression -> expression MIN expression .)
    STRING          reduce using rule 29 (expression -> expression MIN expression .)
    OPEN_PAR        reduce using rule 29 (expression -> expression MIN expression .)
    NOT             reduce using rule 29 (expression -> expression MIN expression .)
    IF              reduce using rule 29 (expression -> expression MIN expression .)
    $end            reduce using rule 29 (expression -> expression MIN expression .)
    CLOSING_PAR     reduce using rule 29 (expression -> expression MIN expression .)
    THEN            reduce using rule 29 (expression -> expression MIN expression .)
    COMMA           reduce using rule 29 (expression -> expression MIN expression .)
    ELSE            reduce using rule 29 (expression -> expression MIN expression .)
    END             reduce using rule 29 (expression -> expression MIN expression .)
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37

  ! DIV             [ reduce using rule 29 (expression -> expression MIN expression .) ]
  ! MUL             [ reduce using rule 29 (expression -> expression MIN expression .) ]
  ! POW             [ reduce using rule 29 (expression -> expression MIN expression .) ]
  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 64

    (32) expression -> expression POW expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 32 (expression -> expression POW expression .)
    MIN             reduce using rule 32 (expression -> expression POW expression .)
    DIV             reduce using rule 32 (expression -> expression POW expression .)
    MUL             reduce using rule 32 (expression -> expression POW expression .)
    POW             reduce using rule 32 (expression -> expression POW expression .)
    MOD             reduce using rule 32 (expression -> expression POW expression .)
    INTDIV          reduce using rule 32 (expression -> expression POW expression .)
    AND             reduce using rule 32 (expression -> expression POW expression .)
    OR              reduce using rule 32 (expression -> expression POW expression .)
    EQ              reduce using rule 32 (expression -> expression POW expression .)
    NE              reduce using rule 32 (expression -> expression POW expression .)
    LT              reduce using rule 32 (expression -> expression POW expression .)
    LE              reduce using rule 32 (expression -> expression POW expression .)
    GT              reduce using rule 32 (expression -> expression POW expression .)
    GE              reduce using rule 32 (expression -> expression POW expression .)
    ID              reduce using rule 32 (expression -> expression POW expression .)
    INT             reduce using rule 32 (expression -> expression POW expression .)
    FLOAT           reduce using rule 32 (expression -> expression POW expression .)
    TRUE            reduce using rule 32 (expression -> expression POW expression .)
    FALSE           reduce using rule 32 (expression -> expression POW expression .)
    STRING          reduce using rule 32 (expression -> expression POW expression .)
    OPEN_PAR        reduce using rule 32 (expression -> expression POW expression .)
    NOT             reduce using rule 32 (expression -> expression POW expression .)
    IF              reduce using rule 32 (expression -> expression POW expression .)
    $end            reduce using rule 32 (expression -> expression POW expression .)
    CLOSING_PAR     reduce using rule 32 (expression -> expression POW expression .)
    THEN            reduce using rule 32 (expression -> expression POW expression .)
    COMMA           reduce using rule 32 (expression -> expression POW expression .)
    ELSE            reduce using rule 32 (expression -> expression POW expression .)
    END             reduce using rule 32 (expression -> expression POW expression .)

  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! DIV             [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 42 ]
  ! POW             [ shift and go to state 37 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 65

    (38) expression -> expression NE expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 38 (expression -> expression NE expression .)
    INT             reduce using rule 38 (expression -> expression NE expression .)
    FLOAT           reduce using rule 38 (expression -> expression NE expression .)
    TRUE            reduce using rule 38 (expression -> expression NE expression .)
    FALSE           reduce using rule 38 (expression -> expression NE expression .)
    STRING          reduce using rule 38 (expression -> expression NE expression .)
    OPEN_PAR        reduce using rule 38 (expression -> expression NE expression .)
    NOT             reduce using rule 38 (expression -> expression NE expression .)
    IF              reduce using rule 38 (expression -> expression NE expression .)
    $end            reduce using rule 38 (expression -> expression NE expression .)
    CLOSING_PAR     reduce using rule 38 (expression -> expression NE expression .)
    THEN            reduce using rule 38 (expression -> expression NE expression .)
    COMMA           reduce using rule 38 (expression -> expression NE expression .)
    ELSE            reduce using rule 38 (expression -> expression NE expression .)
    END             reduce using rule 38 (expression -> expression NE expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! MIN             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! MUL             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! POW             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! INTDIV          [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 38 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 38 (expression -> expression NE expression .) ]


state 66

    (39) expression -> expression LT expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 39 (expression -> expression LT expression .)
    INT             reduce using rule 39 (expression -> expression LT expression .)
    FLOAT           reduce using rule 39 (expression -> expression LT expression .)
    TRUE            reduce using rule 39 (expression -> expression LT expression .)
    FALSE           reduce using rule 39 (expression -> expression LT expression .)
    STRING          reduce using rule 39 (expression -> expression LT expression .)
    OPEN_PAR        reduce using rule 39 (expression -> expression LT expression .)
    NOT             reduce using rule 39 (expression -> expression LT expression .)
    IF              reduce using rule 39 (expression -> expression LT expression .)
    $end            reduce using rule 39 (expression -> expression LT expression .)
    CLOSING_PAR     reduce using rule 39 (expression -> expression LT expression .)
    THEN            reduce using rule 39 (expression -> expression LT expression .)
    COMMA           reduce using rule 39 (expression -> expression LT expression .)
    ELSE            reduce using rule 39 (expression -> expression LT expression .)
    END             reduce using rule 39 (expression -> expression LT expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! MIN             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! POW             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! INTDIV          [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 39 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 39 (expression -> expression LT expression .) ]


state 67

    (28) expression -> expression ADD expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 28 (expression -> expression ADD expression .)
    MIN             reduce using rule 28 (expression -> expression ADD expression .)
    MOD             reduce using rule 28 (expression -> expression ADD expression .)
    INTDIV          reduce using rule 28 (expression -> expression ADD expression .)
    AND             reduce using rule 28 (expression -> expression ADD expression .)
    OR              reduce using rule 28 (expression -> expression ADD expression .)
    EQ              reduce using rule 28 (expression -> expression ADD expression .)
    NE              reduce using rule 28 (expression -> expression ADD expression .)
    LT              reduce using rule 28 (expression -> expression ADD expression .)
    LE              reduce using rule 28 (expression -> expression ADD expression .)
    GT              reduce using rule 28 (expression -> expression ADD expression .)
    GE              reduce using rule 28 (expression -> expression ADD expression .)
    ID              reduce using rule 28 (expression -> expression ADD expression .)
    INT             reduce using rule 28 (expression -> expression ADD expression .)
    FLOAT           reduce using rule 28 (expression -> expression ADD expression .)
    TRUE            reduce using rule 28 (expression -> expression ADD expression .)
    FALSE           reduce using rule 28 (expression -> expression ADD expression .)
    STRING          reduce using rule 28 (expression -> expression ADD expression .)
    OPEN_PAR        reduce using rule 28 (expression -> expression ADD expression .)
    NOT             reduce using rule 28 (expression -> expression ADD expression .)
    IF              reduce using rule 28 (expression -> expression ADD expression .)
    $end            reduce using rule 28 (expression -> expression ADD expression .)
    CLOSING_PAR     reduce using rule 28 (expression -> expression ADD expression .)
    THEN            reduce using rule 28 (expression -> expression ADD expression .)
    COMMA           reduce using rule 28 (expression -> expression ADD expression .)
    ELSE            reduce using rule 28 (expression -> expression ADD expression .)
    END             reduce using rule 28 (expression -> expression ADD expression .)
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37

  ! DIV             [ reduce using rule 28 (expression -> expression ADD expression .) ]
  ! MUL             [ reduce using rule 28 (expression -> expression ADD expression .) ]
  ! POW             [ reduce using rule 28 (expression -> expression ADD expression .) ]
  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 68

    (41) expression -> expression GT expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 41 (expression -> expression GT expression .)
    INT             reduce using rule 41 (expression -> expression GT expression .)
    FLOAT           reduce using rule 41 (expression -> expression GT expression .)
    TRUE            reduce using rule 41 (expression -> expression GT expression .)
    FALSE           reduce using rule 41 (expression -> expression GT expression .)
    STRING          reduce using rule 41 (expression -> expression GT expression .)
    OPEN_PAR        reduce using rule 41 (expression -> expression GT expression .)
    NOT             reduce using rule 41 (expression -> expression GT expression .)
    IF              reduce using rule 41 (expression -> expression GT expression .)
    $end            reduce using rule 41 (expression -> expression GT expression .)
    CLOSING_PAR     reduce using rule 41 (expression -> expression GT expression .)
    THEN            reduce using rule 41 (expression -> expression GT expression .)
    COMMA           reduce using rule 41 (expression -> expression GT expression .)
    ELSE            reduce using rule 41 (expression -> expression GT expression .)
    END             reduce using rule 41 (expression -> expression GT expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MIN             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! POW             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! INTDIV          [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 41 (expression -> expression GT expression .) ]


state 69

    (31) expression -> expression MUL expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 31 (expression -> expression MUL expression .)
    MIN             reduce using rule 31 (expression -> expression MUL expression .)
    DIV             reduce using rule 31 (expression -> expression MUL expression .)
    MUL             reduce using rule 31 (expression -> expression MUL expression .)
    MOD             reduce using rule 31 (expression -> expression MUL expression .)
    INTDIV          reduce using rule 31 (expression -> expression MUL expression .)
    AND             reduce using rule 31 (expression -> expression MUL expression .)
    OR              reduce using rule 31 (expression -> expression MUL expression .)
    EQ              reduce using rule 31 (expression -> expression MUL expression .)
    NE              reduce using rule 31 (expression -> expression MUL expression .)
    LT              reduce using rule 31 (expression -> expression MUL expression .)
    LE              reduce using rule 31 (expression -> expression MUL expression .)
    GT              reduce using rule 31 (expression -> expression MUL expression .)
    GE              reduce using rule 31 (expression -> expression MUL expression .)
    ID              reduce using rule 31 (expression -> expression MUL expression .)
    INT             reduce using rule 31 (expression -> expression MUL expression .)
    FLOAT           reduce using rule 31 (expression -> expression MUL expression .)
    TRUE            reduce using rule 31 (expression -> expression MUL expression .)
    FALSE           reduce using rule 31 (expression -> expression MUL expression .)
    STRING          reduce using rule 31 (expression -> expression MUL expression .)
    OPEN_PAR        reduce using rule 31 (expression -> expression MUL expression .)
    NOT             reduce using rule 31 (expression -> expression MUL expression .)
    IF              reduce using rule 31 (expression -> expression MUL expression .)
    $end            reduce using rule 31 (expression -> expression MUL expression .)
    CLOSING_PAR     reduce using rule 31 (expression -> expression MUL expression .)
    THEN            reduce using rule 31 (expression -> expression MUL expression .)
    COMMA           reduce using rule 31 (expression -> expression MUL expression .)
    ELSE            reduce using rule 31 (expression -> expression MUL expression .)
    END             reduce using rule 31 (expression -> expression MUL expression .)
    POW             shift and go to state 37

  ! POW             [ reduce using rule 31 (expression -> expression MUL expression .) ]
  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! DIV             [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 70

    (30) expression -> expression DIV expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    ADD             reduce using rule 30 (expression -> expression DIV expression .)
    MIN             reduce using rule 30 (expression -> expression DIV expression .)
    DIV             reduce using rule 30 (expression -> expression DIV expression .)
    MUL             reduce using rule 30 (expression -> expression DIV expression .)
    MOD             reduce using rule 30 (expression -> expression DIV expression .)
    INTDIV          reduce using rule 30 (expression -> expression DIV expression .)
    AND             reduce using rule 30 (expression -> expression DIV expression .)
    OR              reduce using rule 30 (expression -> expression DIV expression .)
    EQ              reduce using rule 30 (expression -> expression DIV expression .)
    NE              reduce using rule 30 (expression -> expression DIV expression .)
    LT              reduce using rule 30 (expression -> expression DIV expression .)
    LE              reduce using rule 30 (expression -> expression DIV expression .)
    GT              reduce using rule 30 (expression -> expression DIV expression .)
    GE              reduce using rule 30 (expression -> expression DIV expression .)
    ID              reduce using rule 30 (expression -> expression DIV expression .)
    INT             reduce using rule 30 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 30 (expression -> expression DIV expression .)
    TRUE            reduce using rule 30 (expression -> expression DIV expression .)
    FALSE           reduce using rule 30 (expression -> expression DIV expression .)
    STRING          reduce using rule 30 (expression -> expression DIV expression .)
    OPEN_PAR        reduce using rule 30 (expression -> expression DIV expression .)
    NOT             reduce using rule 30 (expression -> expression DIV expression .)
    IF              reduce using rule 30 (expression -> expression DIV expression .)
    $end            reduce using rule 30 (expression -> expression DIV expression .)
    CLOSING_PAR     reduce using rule 30 (expression -> expression DIV expression .)
    THEN            reduce using rule 30 (expression -> expression DIV expression .)
    COMMA           reduce using rule 30 (expression -> expression DIV expression .)
    ELSE            reduce using rule 30 (expression -> expression DIV expression .)
    END             reduce using rule 30 (expression -> expression DIV expression .)
    POW             shift and go to state 37

  ! POW             [ reduce using rule 30 (expression -> expression DIV expression .) ]
  ! ADD             [ shift and go to state 40 ]
  ! MIN             [ shift and go to state 36 ]
  ! DIV             [ shift and go to state 43 ]
  ! MUL             [ shift and go to state 42 ]
  ! MOD             [ shift and go to state 45 ]
  ! INTDIV          [ shift and go to state 33 ]
  ! AND             [ shift and go to state 31 ]
  ! OR              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 38 ]
  ! LT              [ shift and go to state 39 ]
  ! LE              [ shift and go to state 34 ]
  ! GT              [ shift and go to state 41 ]
  ! GE              [ shift and go to state 32 ]


state 71

    (36) expression -> expression OR expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 36 (expression -> expression OR expression .)
    INT             reduce using rule 36 (expression -> expression OR expression .)
    FLOAT           reduce using rule 36 (expression -> expression OR expression .)
    TRUE            reduce using rule 36 (expression -> expression OR expression .)
    FALSE           reduce using rule 36 (expression -> expression OR expression .)
    STRING          reduce using rule 36 (expression -> expression OR expression .)
    OPEN_PAR        reduce using rule 36 (expression -> expression OR expression .)
    NOT             reduce using rule 36 (expression -> expression OR expression .)
    IF              reduce using rule 36 (expression -> expression OR expression .)
    $end            reduce using rule 36 (expression -> expression OR expression .)
    CLOSING_PAR     reduce using rule 36 (expression -> expression OR expression .)
    THEN            reduce using rule 36 (expression -> expression OR expression .)
    COMMA           reduce using rule 36 (expression -> expression OR expression .)
    ELSE            reduce using rule 36 (expression -> expression OR expression .)
    END             reduce using rule 36 (expression -> expression OR expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MIN             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MUL             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! INTDIV          [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 36 (expression -> expression OR expression .) ]


state 72

    (33) expression -> expression MOD expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for INTDIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    ID              reduce using rule 33 (expression -> expression MOD expression .)
    INT             reduce using rule 33 (expression -> expression MOD expression .)
    FLOAT           reduce using rule 33 (expression -> expression MOD expression .)
    TRUE            reduce using rule 33 (expression -> expression MOD expression .)
    FALSE           reduce using rule 33 (expression -> expression MOD expression .)
    STRING          reduce using rule 33 (expression -> expression MOD expression .)
    OPEN_PAR        reduce using rule 33 (expression -> expression MOD expression .)
    NOT             reduce using rule 33 (expression -> expression MOD expression .)
    IF              reduce using rule 33 (expression -> expression MOD expression .)
    $end            reduce using rule 33 (expression -> expression MOD expression .)
    CLOSING_PAR     reduce using rule 33 (expression -> expression MOD expression .)
    THEN            reduce using rule 33 (expression -> expression MOD expression .)
    COMMA           reduce using rule 33 (expression -> expression MOD expression .)
    ELSE            reduce using rule 33 (expression -> expression MOD expression .)
    END             reduce using rule 33 (expression -> expression MOD expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32

  ! ADD             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! MIN             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! MUL             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! POW             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! INTDIV          [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! NE              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! LE              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 33 (expression -> expression MOD expression .) ]
  ! GE              [ reduce using rule 33 (expression -> expression MOD expression .) ]


state 73

    (18) fct_call -> ID OPEN_PAR parameters CLOSING_PAR .

    END             reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    ID              reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    INT             reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    FLOAT           reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    TRUE            reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    FALSE           reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    STRING          reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    OPEN_PAR        reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    MIN             reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    NOT             reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    IF              reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    $end            reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)
    ELSE            reduce using rule 18 (fct_call -> ID OPEN_PAR parameters CLOSING_PAR .)


state 74

    (19) parameters -> parameters COMMA . expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    ID              shift and go to state 18
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15

    expression                     shift and go to state 76

state 75

    (16) if_sta -> IF expression THEN programme . ELSE programme END
    (17) if_sta -> IF expression THEN programme . END
    (1) programme -> programme . statement
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

    ELSE            shift and go to state 78
    END             shift and go to state 77
    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

    fct_call                       shift and go to state 13
    statement                      shift and go to state 46
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16

state 76

    (19) parameters -> parameters COMMA expression .
    (28) expression -> expression . ADD expression
    (29) expression -> expression . MIN expression
    (30) expression -> expression . DIV expression
    (31) expression -> expression . MUL expression
    (32) expression -> expression . POW expression
    (33) expression -> expression . MOD expression
    (34) expression -> expression . INTDIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . OR expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . LT expression
    (40) expression -> expression . LE expression
    (41) expression -> expression . GT expression
    (42) expression -> expression . GE expression

    CLOSING_PAR     reduce using rule 19 (parameters -> parameters COMMA expression .)
    COMMA           reduce using rule 19 (parameters -> parameters COMMA expression .)
    ADD             shift and go to state 40
    MIN             shift and go to state 36
    DIV             shift and go to state 43
    MUL             shift and go to state 42
    POW             shift and go to state 37
    MOD             shift and go to state 45
    INTDIV          shift and go to state 33
    AND             shift and go to state 31
    OR              shift and go to state 44
    EQ              shift and go to state 35
    NE              shift and go to state 38
    LT              shift and go to state 39
    LE              shift and go to state 34
    GT              shift and go to state 41
    GE              shift and go to state 32


state 77

    (17) if_sta -> IF expression THEN programme END .

    ID              reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    INT             reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    FLOAT           reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    TRUE            reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    FALSE           reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    STRING          reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    OPEN_PAR        reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    MIN             reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    NOT             reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    IF              reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    $end            reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    ELSE            reduce using rule 17 (if_sta -> IF expression THEN programme END .)
    END             reduce using rule 17 (if_sta -> IF expression THEN programme END .)


state 78

    (16) if_sta -> IF expression THEN programme ELSE . programme END
    (1) programme -> . programme statement
    (2) programme -> . statement
    (3) programme -> .
    (4) programme -> . error
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for OPEN_PAR resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 3 (programme -> .)
    error           shift and go to state 14
    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

  ! ID              [ reduce using rule 3 (programme -> .) ]
  ! INT             [ reduce using rule 3 (programme -> .) ]
  ! FLOAT           [ reduce using rule 3 (programme -> .) ]
  ! TRUE            [ reduce using rule 3 (programme -> .) ]
  ! FALSE           [ reduce using rule 3 (programme -> .) ]
  ! STRING          [ reduce using rule 3 (programme -> .) ]
  ! OPEN_PAR        [ reduce using rule 3 (programme -> .) ]
  ! MIN             [ reduce using rule 3 (programme -> .) ]
  ! NOT             [ reduce using rule 3 (programme -> .) ]
  ! IF              [ reduce using rule 3 (programme -> .) ]

    fct_call                       shift and go to state 13
    statement                      shift and go to state 5
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16
    programme                      shift and go to state 79

state 79

    (16) if_sta -> IF expression THEN programme ELSE programme . END
    (1) programme -> programme . statement
    (5) statement -> . affectation
    (6) statement -> . expression
    (7) statement -> . if_sta
    (8) statement -> . fct_call
    (9) affectation -> . ID AFFECT expression
    (10) affectation -> . ID ADD_AFF expression
    (11) affectation -> . ID MIN_AFF expression
    (12) affectation -> . ID MUL_AFF expression
    (13) affectation -> . ID DIV_AFF expression
    (14) affectation -> . ID MOD_AFF expression
    (15) affectation -> . ID IDV_AFF expression
    (21) expression -> . INT
    (22) expression -> . FLOAT
    (23) expression -> . ID
    (24) expression -> . TRUE
    (25) expression -> . FALSE
    (26) expression -> . STRING
    (27) expression -> . OPEN_PAR expression CLOSING_PAR
    (28) expression -> . expression ADD expression
    (29) expression -> . expression MIN expression
    (30) expression -> . expression DIV expression
    (31) expression -> . expression MUL expression
    (32) expression -> . expression POW expression
    (33) expression -> . expression MOD expression
    (34) expression -> . expression INTDIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression OR expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression LT expression
    (40) expression -> . expression LE expression
    (41) expression -> . expression GT expression
    (42) expression -> . expression GE expression
    (43) expression -> . MIN expression
    (44) expression -> . NOT expression
    (16) if_sta -> . IF expression THEN programme ELSE programme END
    (17) if_sta -> . IF expression THEN programme END
    (18) fct_call -> . ID OPEN_PAR parameters CLOSING_PAR

    END             shift and go to state 80
    ID              shift and go to state 9
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TRUE            shift and go to state 3
    FALSE           shift and go to state 8
    STRING          shift and go to state 7
    OPEN_PAR        shift and go to state 4
    MIN             shift and go to state 1
    NOT             shift and go to state 15
    IF              shift and go to state 10

    fct_call                       shift and go to state 13
    statement                      shift and go to state 46
    if_sta                         shift and go to state 6
    affectation                    shift and go to state 2
    expression                     shift and go to state 16

state 80

    (16) if_sta -> IF expression THEN programme ELSE programme END .

    ID              reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    INT             reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    FLOAT           reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    TRUE            reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    FALSE           reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    STRING          reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    OPEN_PAR        reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    MIN             reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    NOT             reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    IF              reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    $end            reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    ELSE            reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)
    END             reduce using rule 16 (if_sta -> IF expression THEN programme ELSE programme END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAR in state 0 resolved as shift
WARNING: shift/reduce conflict for MIN in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAR in state 9 resolved as shift
WARNING: shift/reduce conflict for MIN in state 16 resolved as shift
WARNING: shift/reduce conflict for ADD in state 30 resolved as shift
WARNING: shift/reduce conflict for MIN in state 30 resolved as shift
WARNING: shift/reduce conflict for DIV in state 30 resolved as shift
WARNING: shift/reduce conflict for MUL in state 30 resolved as shift
WARNING: shift/reduce conflict for POW in state 30 resolved as shift
WARNING: shift/reduce conflict for MOD in state 30 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 30 resolved as shift
WARNING: shift/reduce conflict for AND in state 30 resolved as shift
WARNING: shift/reduce conflict for OR in state 30 resolved as shift
WARNING: shift/reduce conflict for EQ in state 30 resolved as shift
WARNING: shift/reduce conflict for NE in state 30 resolved as shift
WARNING: shift/reduce conflict for LT in state 30 resolved as shift
WARNING: shift/reduce conflict for LE in state 30 resolved as shift
WARNING: shift/reduce conflict for GT in state 30 resolved as shift
WARNING: shift/reduce conflict for GE in state 30 resolved as shift
WARNING: shift/reduce conflict for MIN in state 50 resolved as shift
WARNING: shift/reduce conflict for MIN in state 51 resolved as shift
WARNING: shift/reduce conflict for MIN in state 52 resolved as shift
WARNING: shift/reduce conflict for MIN in state 53 resolved as shift
WARNING: shift/reduce conflict for MIN in state 54 resolved as shift
WARNING: shift/reduce conflict for MIN in state 55 resolved as shift
WARNING: shift/reduce conflict for MIN in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 57 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 57 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING in state 57 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAR in state 57 resolved as shift
WARNING: shift/reduce conflict for MIN in state 57 resolved as shift
WARNING: shift/reduce conflict for NOT in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for ADD in state 58 resolved as shift
WARNING: shift/reduce conflict for MIN in state 58 resolved as shift
WARNING: shift/reduce conflict for DIV in state 58 resolved as shift
WARNING: shift/reduce conflict for MUL in state 58 resolved as shift
WARNING: shift/reduce conflict for POW in state 58 resolved as shift
WARNING: shift/reduce conflict for MOD in state 58 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for NE in state 58 resolved as shift
WARNING: shift/reduce conflict for LT in state 58 resolved as shift
WARNING: shift/reduce conflict for LE in state 58 resolved as shift
WARNING: shift/reduce conflict for GT in state 58 resolved as shift
WARNING: shift/reduce conflict for GE in state 58 resolved as shift
WARNING: shift/reduce conflict for ADD in state 59 resolved as shift
WARNING: shift/reduce conflict for MIN in state 59 resolved as shift
WARNING: shift/reduce conflict for DIV in state 59 resolved as shift
WARNING: shift/reduce conflict for MUL in state 59 resolved as shift
WARNING: shift/reduce conflict for POW in state 59 resolved as shift
WARNING: shift/reduce conflict for MOD in state 59 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for NE in state 59 resolved as shift
WARNING: shift/reduce conflict for LT in state 59 resolved as shift
WARNING: shift/reduce conflict for LE in state 59 resolved as shift
WARNING: shift/reduce conflict for GT in state 59 resolved as shift
WARNING: shift/reduce conflict for GE in state 59 resolved as shift
WARNING: shift/reduce conflict for ADD in state 60 resolved as shift
WARNING: shift/reduce conflict for MIN in state 60 resolved as shift
WARNING: shift/reduce conflict for DIV in state 60 resolved as shift
WARNING: shift/reduce conflict for MUL in state 60 resolved as shift
WARNING: shift/reduce conflict for POW in state 60 resolved as shift
WARNING: shift/reduce conflict for MOD in state 60 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for NE in state 60 resolved as shift
WARNING: shift/reduce conflict for LT in state 60 resolved as shift
WARNING: shift/reduce conflict for LE in state 60 resolved as shift
WARNING: shift/reduce conflict for GT in state 60 resolved as shift
WARNING: shift/reduce conflict for GE in state 60 resolved as shift
WARNING: shift/reduce conflict for ADD in state 61 resolved as shift
WARNING: shift/reduce conflict for MIN in state 61 resolved as shift
WARNING: shift/reduce conflict for DIV in state 61 resolved as shift
WARNING: shift/reduce conflict for MUL in state 61 resolved as shift
WARNING: shift/reduce conflict for POW in state 61 resolved as shift
WARNING: shift/reduce conflict for MOD in state 61 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for NE in state 61 resolved as shift
WARNING: shift/reduce conflict for LT in state 61 resolved as shift
WARNING: shift/reduce conflict for LE in state 61 resolved as shift
WARNING: shift/reduce conflict for GT in state 61 resolved as shift
WARNING: shift/reduce conflict for GE in state 61 resolved as shift
WARNING: shift/reduce conflict for ADD in state 62 resolved as shift
WARNING: shift/reduce conflict for MIN in state 62 resolved as shift
WARNING: shift/reduce conflict for DIV in state 62 resolved as shift
WARNING: shift/reduce conflict for MUL in state 62 resolved as shift
WARNING: shift/reduce conflict for POW in state 62 resolved as shift
WARNING: shift/reduce conflict for MOD in state 62 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for NE in state 62 resolved as shift
WARNING: shift/reduce conflict for LT in state 62 resolved as shift
WARNING: shift/reduce conflict for LE in state 62 resolved as shift
WARNING: shift/reduce conflict for GT in state 62 resolved as shift
WARNING: shift/reduce conflict for GE in state 62 resolved as shift
WARNING: shift/reduce conflict for ADD in state 65 resolved as shift
WARNING: shift/reduce conflict for MIN in state 65 resolved as shift
WARNING: shift/reduce conflict for DIV in state 65 resolved as shift
WARNING: shift/reduce conflict for MUL in state 65 resolved as shift
WARNING: shift/reduce conflict for POW in state 65 resolved as shift
WARNING: shift/reduce conflict for MOD in state 65 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for NE in state 65 resolved as shift
WARNING: shift/reduce conflict for LT in state 65 resolved as shift
WARNING: shift/reduce conflict for LE in state 65 resolved as shift
WARNING: shift/reduce conflict for GT in state 65 resolved as shift
WARNING: shift/reduce conflict for GE in state 65 resolved as shift
WARNING: shift/reduce conflict for ADD in state 66 resolved as shift
WARNING: shift/reduce conflict for MIN in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for MUL in state 66 resolved as shift
WARNING: shift/reduce conflict for POW in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for NE in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for LE in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for GE in state 66 resolved as shift
WARNING: shift/reduce conflict for ADD in state 68 resolved as shift
WARNING: shift/reduce conflict for MIN in state 68 resolved as shift
WARNING: shift/reduce conflict for DIV in state 68 resolved as shift
WARNING: shift/reduce conflict for MUL in state 68 resolved as shift
WARNING: shift/reduce conflict for POW in state 68 resolved as shift
WARNING: shift/reduce conflict for MOD in state 68 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NE in state 68 resolved as shift
WARNING: shift/reduce conflict for LT in state 68 resolved as shift
WARNING: shift/reduce conflict for LE in state 68 resolved as shift
WARNING: shift/reduce conflict for GT in state 68 resolved as shift
WARNING: shift/reduce conflict for GE in state 68 resolved as shift
WARNING: shift/reduce conflict for ADD in state 71 resolved as shift
WARNING: shift/reduce conflict for MIN in state 71 resolved as shift
WARNING: shift/reduce conflict for DIV in state 71 resolved as shift
WARNING: shift/reduce conflict for MUL in state 71 resolved as shift
WARNING: shift/reduce conflict for POW in state 71 resolved as shift
WARNING: shift/reduce conflict for MOD in state 71 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NE in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for LE in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for GE in state 71 resolved as shift
WARNING: shift/reduce conflict for ADD in state 72 resolved as shift
WARNING: shift/reduce conflict for MIN in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for POW in state 72 resolved as shift
WARNING: shift/reduce conflict for MOD in state 72 resolved as shift
WARNING: shift/reduce conflict for INTDIV in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for LE in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for GE in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for INT in state 78 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 78 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 78 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 78 resolved as shift
WARNING: shift/reduce conflict for STRING in state 78 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAR in state 78 resolved as shift
WARNING: shift/reduce conflict for MIN in state 78 resolved as shift
WARNING: shift/reduce conflict for NOT in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
